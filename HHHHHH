#!/usr/bin/env php
<?php
/**
 * Memory-friendly Function Call Finder (PhpSpreadsheet版)
 *
 * requirements:
 *   composer require nikic/php-parser:^5 phpoffice/phpspreadsheet:^2
 */

declare(strict_types=1);
ini_set('memory_limit', '512M');
require_once __DIR__ . '/vendor/autoload.php';

use PhpParser\{Node, ParserFactory, NodeTraverser};
use PhpParser\NodeVisitor\NameResolver;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Settings;

/* ---------- 0. PhpSpreadsheet 設定（最重要） ---------- */
// 16 MB を超えたセルは一時ファイルに退避
Settings::setCacheStorageMethod(
    Settings::CACHE_TO_PHP_TEMP,
    ['memoryCacheSize' => '16MB']
);

/* =========================================================
   1. 引数チェック
   ======================================================= */
if ($argc < 2) {
    fwrite(STDERR, "Usage: php funcCallFinder-writeonly.php <DIR|FILE> [...] [out.xlsx]\n");
    exit(1);
}
$paths   = $argv;
array_shift($paths);
$outFile = preg_match('/\.xlsx$/i', end($paths))
    ? array_pop($paths)
    : 'function_calls_' . date('Ymd_His') . '.xlsx';

/* =========================================================
   2. Write-Only Spreadsheet & ワークシート生成
   ======================================================= */
$spreadsheet = new Spreadsheet(null, true);          // ← write-only mode
$sheet       = $spreadsheet->getActiveSheet();
$sheet->fromArray(['ファイル名','呼び出し関数','呼び出し元','引数','備考'], null, 'A1', true);
$rowNum      = 1;                                    // 見出し行を書いたので 1

/* =========================================================
   3. 解析用 Visitor
   ======================================================= */
class FunctionCallVisitor extends \PhpParser\NodeVisitorAbstract
{
    private string $currentFunc = '';
    private string $file;
    private array  $builtins;
    private array  $rows = [];

    public function __construct(string $file)
    {
        $this->file     = $file;
        $this->builtins = get_defined_functions()['internal'];
    }
    public function getRows(): array { return $this->rows; }

    public function enterNode(Node $n)
    {
        if ($n instanceof Node\Stmt\Function_ || $n instanceof Node\Stmt\ClassMethod) {
            $this->currentFunc = $n->name->toString();
            return;
        }
        $isCall =
              ($n instanceof Node\Expr\FuncCall    && $n->name   instanceof Node\Name)
           || ($n instanceof Node\Expr\StaticCall  && $n->name   instanceof Node\Identifier)
           || ($n instanceof Node\Expr\MethodCall  && $n->name   instanceof Node\Identifier);

        if (!$isCall) return;

        $name = $n->name->toString();
        if (in_array($name, $this->builtins, true)) return; // 内部関数は対象外

        $this->rows[] = [
            $this->file,
            $this->short($name),
            $this->currentFunc,
            $this->argsToString($n->args),
            $name === $this->currentFunc ? '再帰呼び出し' : '',
        ];
    }

    public function leaveNode(Node $n)
    {
        if ($n instanceof Node\Stmt\Function_ || $n instanceof Node\Stmt\ClassMethod) {
            $this->currentFunc = '';
        }
    }

    /* ---------- helper ---------- */
    private function short(string $fqcn): string
    {
        return strrpos($fqcn, '\\') !== false ? substr($fqcn, strrpos($fqcn,'\\')+1) : $fqcn;
    }
    private function argsToString(array $args): string
    {
        $out=[];
        foreach ($args as $a) {
            $v=$a->value;
            $out[] = match(true){
                $v instanceof Node\Scalar\String_ => '"'.$v->value.'"',
                $v instanceof Node\Scalar\LNumber => (string)$v->value,
                $v instanceof Node\Expr\Variable => '$'.$v->name,
                $v instanceof Node\Expr\Array_   => '[...]',
                default                          => '...',
            };
        }
        return implode(', ', $out);
    }
}

/* =========================================================
   4. 解析本体
   ======================================================= */
$parserFactory = new ParserFactory();

foreach ($paths as $inPath) {
    $files = [];

    if (is_dir($inPath)) {
        $iter = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($inPath));
        foreach ($iter as $f) {
            if ($f->isFile()
                && in_array(strtolower($f->getExtension()), ['php','inc','html','js'], true)) {
                $files[] = $f->getPathname();
            }
        }
    } elseif (is_file($inPath)) {
        $files[] = $inPath;
    } else {
        fwrite(STDERR, "warning: {$inPath} not found\n");
        continue;
    }

    /* ---- 個々のファイルを処理 ---- */
    foreach ($files as $file) {
        $code = preg_replace('/<\?(?!php|=)/', '<?php ', file_get_contents($file));

        $parser  = $parserFactory->createForNewestSupportedVersion();
        $visitor = new FunctionCallVisitor($file);

        try {
            $ast = $parser->parse($code);
            if ($ast === null) continue;

            $tr = new NodeTraverser();
            $tr->addVisitor(new NameResolver());
            // コメントを捨てる
            $tr->addVisitor(new class extends \PhpParser\NodeVisitorAbstract{
                public function leaveNode(Node $n){ $n->setAttribute('comments',[]); }
            });
            $tr->addVisitor($visitor);
            $tr->traverse($ast);

            /* ---- 見つけた行を即シートへ ---- */
            foreach ($visitor->getRows() as $r) {
                $sheet->fromArray($r, null, 'A' . ++$rowNum, true);
            }

        } catch (\PhpParser\Error $e) {
            fwrite(STDERR, "parse error in {$file}: {$e->getMessage()}\n");
        }

        unset($ast, $parser, $visitor, $code);
        gc_collect_cycles();
    }
}

/* =========================================================
   5. 保存
   ======================================================= */
$writer = new Xlsx($spreadsheet);
$writer->setPreCalculateFormulas(false);      // 速度 & メモリ節約
$writer->save($outFile);

echo "解析完了 → {$outFile}\n";