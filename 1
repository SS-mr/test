#!/usr/bin/env php
<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Settings;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Cache\Psr16Cache;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpParser\ParserFactory;

// ■ 1. PSR-16 キャッシュを設定（ディスクベース）
$tempDir    = sys_get_temp_dir();
$psr6Adapter = new FilesystemAdapter('', 0, $tempDir);
$psr16Cache  = new Psr16Cache($psr6Adapter);
Settings::setCache($psr16Cache);  // キャッシュ実装を渡す  [oai_citation:0‡GitHub](https://github.com/PHPOffice/PhpSpreadsheet/blob/master/src/PhpSpreadsheet/Settings.php) [oai_citation:1‡PhpSpreadsheet](https://phpspreadsheet.readthedocs.io/en/latest/topics/memory_saving/?utm_source=chatgpt.com)

// ■ 2. GC を有効化（要らなくなったオブジェクトを解放）
gc_enable();

// ■ 3. CRUD 抽出＋Excel 出力（省略を除いた例）
if ($argc < 3) {
    fwrite(STDERR, "Usage: php analyzer.php <target_dir> <output.xlsx>\n");
    exit(1);
}
$targetDir  = rtrim($argv[1], "/\\");
$outputFile = $argv[2];

// AST 用意（将来拡張向け）
$parser = (new ParserFactory())->createForNewestSupportedVersion();

// シートひとつ
$spreadsheet = new Spreadsheet();
$sheet       = $spreadsheet->getActiveSheet();
$sheet->setTitle('CRUD Results');
$sheet->fromArray(['File', 'Table', 'C', 'R', 'U', 'D'], null, 'A1');

$row = 2;
$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir));
foreach ($rii as $file) {
    if (!$file->isFile() || $file->getExtension() !== 'php') {
        continue;
    }
    $relPath = substr($file->getPathname(), strlen($targetDir) + 1);
    $content = file_get_contents($file->getPathname());
    $crudMap = analyzeCrud($content);

    foreach ($crudMap as $table => $ops) {
        $sheet->setCellValue("A{$row}", $relPath);
        $sheet->setCellValue("B{$row}", $table);
        $sheet->setCellValue("C{$row}", $ops['C'] ? '○' : '');
        $sheet->setCellValue("D{$row}", $ops['R'] ? '○' : '');
        $sheet->setCellValue("E{$row}", $ops['U'] ? '○' : '');
        $sheet->setCellValue("F{$row}", $ops['D'] ? '○' : '');
        $row++;
    }

    // 不要メモリの開放
    unset($content, $crudMap);
    gc_collect_cycles();
}

// ファイル書き出し
$writer = new Xlsx($spreadsheet);
$writer->save($outputFile);
echo "✔ {$outputFile} を生成しました。\n";

// ──────────────
// 正規表現による簡易 CRUD 抽出
function analyzeCrud(string $content): array
{
    $map = [];
    $patterns = [
        'C' => '/INSERT\s+INTO\s+`?([a-zA-Z0-9_]+)`?/i',
        'R' => '/SELECT\b.*?\bFROM\s+`?([a-zA-Z0-9_]+)`?/is',
        'U' => '/UPDATE\s+`?([a-zA-Z0-9_]+)`?/i',
        'D' => '/DELETE\s+FROM\s+`?([a-zA-Z0-9_]+)`?/i',
    ];
    foreach ($patterns as $op => $pat) {
        if (preg_match_all($pat, $content, $m)) {
            foreach ($m[1] as $table) {
                if (!isset($map[$table])) {
                    $map[$table] = ['C'=>false,'R'=>false,'U'=>false,'D'=>false];
                }
                $map[$table][$op] = true;
            }
        }
    }
    return $map;
}