#!/usr/bin/env php
<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpParser\ParserFactory;

// ガベージコレクション有効化
gc_enable();

// 引数チェック
if ($argc < 3) {
    fwrite(STDERR, "Usage: php analyzer.php <target_dir> <output.xlsx>\n");
    exit(1);
}

$targetDir  = rtrim($argv[1], "/\\");
$outputFile = $argv[2];
if (!is_dir($targetDir)) {
    fwrite(STDERR, "Error: '{$targetDir}' is not a directory.\n");
    exit(1);
}

// 将来の AST 用意（今回は使わないがインスタンスのみ）
$parser = (new ParserFactory())->createForNewestSupportedVersion();

// スプレッドシート準備（シートは 1 枚）
$spreadsheet = new Spreadsheet();
$sheet       = $spreadsheet->getActiveSheet();
$sheet->setTitle('CRUD Results');

// ヘッダー
$sheet->fromArray(['File', 'Table', 'C', 'R', 'U', 'D'], null, 'A1');

$row = 2;
$prevFile = null;

$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir));
foreach ($rii as $file) {
    if (!$file->isFile() || strtolower($file->getExtension()) !== 'php') {
        continue;
    }

    // 相対パス
    $relPath = substr($file->getPathname(), strlen($targetDir) + 1);
    $content = file_get_contents($file->getPathname());
    $crudMap = analyzeCrud($content);

    // ファイル内の各テーブル操作を出力
    foreach ($crudMap as $table => $ops) {
        // ファイル切り替え時は空行を挿入
        if ($relPath !== $prevFile) {
            if ($prevFile !== null) {
                $row++;  // 空白行
            }
            // 新ファイル名を出力
            $sheet->setCellValue("A{$row}", $relPath);
            $prevFile = $relPath;
        }
        // 同一ファイル２行目以降は A 列を空白に
        // テーブルと CRUD 列を埋める
        $sheet->setCellValue("B{$row}", $table);
        $sheet->setCellValue("C{$row}", $ops['C'] ? '○' : '');
        $sheet->setCellValue("D{$row}", $ops['R'] ? '○' : '');
        $sheet->setCellValue("E{$row}", $ops['U'] ? '○' : '');
        $sheet->setCellValue("F{$row}", $ops['D'] ? '○' : '');

        $row++;
    }

    // メモリ解放
    unset($content, $crudMap);
    gc_collect_cycles();
}

// ファイル書き出し
$writer = new Xlsx($spreadsheet);
$writer->save($outputFile);

echo "✔ {$outputFile} を生成しました。\n\n";

/**
 * 簡易版：正規表現による CRUD 抽出
 */
function analyzeCrud(string $content): array
{
    $map = [];
    $patterns = [
        'C' => '/INSERT\s+INTO\s+`?([a-zA-Z0-9_]+)`?/i',
        'R' => '/SELECT\b.*?\bFROM\s+`?([a-zA-Z0-9_]+)`?/is',
        'U' => '/UPDATE\s+`?([a-zA-Z0-9_]+)`?/i',
        'D' => '/DELETE\s+FROM\s+`?([a-zA-Z0-9_]+)`?/i',
    ];

    foreach ($patterns as $op => $pat) {
        if (preg_match_all($pat, $content, $m)) {
            foreach ($m[1] as $tbl) {
                if (!isset($map[$tbl])) {
                    $map[$tbl] = ['C'=>false,'R'=>false,'U'=>false,'D'=>false];
                }
                $map[$tbl][$op] = true;
            }
        }
    }

    return $map;
}