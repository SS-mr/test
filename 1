#!/usr/bin/env php
<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Settings;
use PhpOffice\PhpSpreadsheet\CachedObjectStorageFactory;
use PhpParser\ParserFactory;

// --- メモリ管理：セルキャッシュを phpTemp に設定 ---
Settings::setCacheStorageMethod(
    CachedObjectStorageFactory::cache_to_phpTemp,
    ['memoryCacheSize' => '16MB']
);

// --- 引数チェック ---
if ($argc < 3) {
    fwrite(STDERR, "Usage: php analyzer.php <target_dir> <output.xlsx>\n");
    exit(1);
}
$targetDir  = rtrim($argv[1], "/\\");
$outputFile = $argv[2];
if (!is_dir($targetDir)) {
    fwrite(STDERR, "Error: '{$targetDir}' is not a directory.\n");
    exit(1);
}

// --- AST 準備（将来拡張用） ---
$parser = (new ParserFactory())->createForNewestSupportedVersion();

// --- シートを 1 つだけ用意 ---
$spreadsheet = new Spreadsheet();
$sheet       = $spreadsheet->getActiveSheet();
$sheet->setTitle('CRUD Results');
$headers = ['File', 'Table', 'C', 'R', 'U', 'D'];
$sheet->fromArray($headers, null, 'A1');

$row = 2;
$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir));
foreach ($rii as $file) {
    if (!$file->isFile() || $file->getExtension() !== 'php') {
        continue;
    }

    $path       = $file->getPathname();
    $relPath    = substr($path, strlen($targetDir) + 1);
    $content    = file_get_contents($path);
    $crudMap    = analyzeCrud($content);

    foreach ($crudMap as $table => $ops) {
        $sheet->setCellValue("A{$row}", $relPath);
        $sheet->setCellValue("B{$row}", $table);
        $sheet->setCellValue("C{$row}", $ops['C'] ? '○' : '');
        $sheet->setCellValue("D{$row}", $ops['R'] ? '○' : '');
        $sheet->setCellValue("E{$row}", $ops['U'] ? '○' : '');
        $sheet->setCellValue("F{$row}", $ops['D'] ? '○' : '');
        $row++;
    }

    // メモリ開放：変数クリア＋GC
    unset($content, $crudMap);
    gc_collect_cycles();
}

// --- ファイル出力 ---
$writer = new Xlsx($spreadsheet);
$writer->save($outputFile);

echo "✔ {$outputFile} を生成しました。\n\n";

/**
 * 簡易版：正規表現による CRUD 検出
 */
function analyzeCrud(string $content): array
{
    $map = [];
    $patterns = [
        'C' => '/INSERT\s+INTO\s+`?([a-zA-Z0-9_]+)`?/i',
        'R' => '/SELECT\b.*?\bFROM\s+`?([a-zA-Z0-9_]+)`?/is',
        'U' => '/UPDATE\s+`?([a-zA-Z0-9_]+)`?/i',
        'D' => '/DELETE\s+FROM\s+`?([a-zA-Z0-9_]+)`?/i',
    ];

    foreach ($patterns as $op => $pat) {
        if (preg_match_all($pat, $content, $m)) {
            foreach ($m[1] as $table) {
                if (!isset($map[$table])) {
                    $map[$table] = ['C'=>false,'R'=>false,'U'=>false,'D'=>false];
                }
                $map[$table][$op] = true;
            }
        }
    }

    return $map;
}