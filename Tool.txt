#!/usr/bin/env php
<?php
require_once __DIR__ . '/vendor/autoload.php';

use PhpParser\ParserFactory;
use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;
use PHPSQLParser\PHPSQLParser;

class FileCRUDVisitor extends NodeVisitorAbstract {
    private $file;
    private $results = [];

    public function __construct($file) {
        $this->file = $file;
    }

    public function enterNode(Node $node) {
        // SQL文字列の代入検出
        if ($node instanceof Node\Expr\Assign && $node->expr instanceof Node\Scalar\String_) {
            $sql = $node->expr->value;

            if (preg_match('/\b(SELECT|INSERT|UPDATE|DELETE)\b/i', $sql)) {
                $parser = new PHPSQLParser();
                try {
                    $parsed = $parser->parse($sql, true);
                } catch (Exception $e) {
                    return; // パースに失敗したらスキップ
                }

                // CRUD判定
                $crudType = isset($parsed['INSERT']) ? 'C' :
                            (isset($parsed['SELECT']) ? 'R' :
                            (isset($parsed['UPDATE']) ? 'U' :
                            (isset($parsed['DELETE']) ? 'D' : '')));

                // テーブルの特定
                $sources = $parsed['FROM'] ?? $parsed['INTO'] ?? $parsed['UPDATE'] ?? $parsed['DELETE'];
                if (!is_array($sources)) return;

                foreach ($sources as $entry) {
                    $tableName = $entry['table'] ?? null;
                    if ($tableName) {
                        $this->results[] = [
                            'file' => $this->file,
                            'table' => $tableName,
                            'C' => $crudType === 'C' ? '○' : '',
                            'R' => $crudType === 'R' ? '○' : '',
                            'U' => $crudType === 'U' ? '○' : '',
                            'D' => $crudType === 'D' ? '○' : '',
                        ];
                    }
                }
            }
        }
    }

    public function getResults(): array {
        return $this->results;
    }
}

// 実行引数の検証
$targetFile = $argv[1] ?? null;
if (!$targetFile || !file_exists($targetFile)) {
    echo "Usage: php file_crud_analyzer.php path/to/target.php\n";
    exit(1);
}

$code = file_get_contents($targetFile);

// 最新対応のパーサを使用
$parser = (new ParserFactory)->createForNewestSupportedVersion();
try {
    $ast = $parser->parse($code);
} catch (Exception $e) {
    echo "Parse error: {$e->getMessage()}\n";
    exit(1);
}

// ASTを走査してCRUD情報を収集
$traverser = new NodeTraverser();
$visitor = new FileCRUDVisitor($targetFile);
$traverser->addVisitor($visitor);
$traverser->traverse($ast);

// 出力形式：ファイル名, テーブル名, CRUDフラグ
foreach ($visitor->getResults() as $row) {
    echo implode("\t", [$row['file'], $row['table'], $row['C'], $row['R'], $row['U'], $row['D']]) . PHP_EOL;
}