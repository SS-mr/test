#!/usr/bin/env php
<?php
/**
 * Analyzer — 解析データ出力対応版
 * コメント除去、定数展開、CRUD/関数解析、インクルード解析、フロントエンドアクセス解析 → Excel出力
 */

require_once __DIR__ . '/vendor/autoload.php';
use PhpOffice\PhpSpreadsheet#!/usr/bin/env php
<?php
require_once __DIR__ . '/vendor/autoload.php';

use PhpParser\ParserFactory;
use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;
use PHPSQLParser\PHPSQLParser;

class FileCRUDVisitor extends NodeVisitorAbstract {
    private $file;
    private $results = [];

    public function __construct($file) {
        $this->file = $file;
    }

    public function enterNode(Node $node) {
        // 変数に代入されたSQL文字列を抽出
        if ($node instanceof Node\Expr\Assign && $node->expr instanceof Node\Scalar\String_) {
            $sql = $node->expr->value;

            if (preg_match('/\b(SELECT|INSERT|UPDATE|DELETE)\b/i', $sql)) {
                $parser = new PHPSQLParser();
                $parsed = $parser->parse($sql, true);

                $crudType = strtoupper($parsed['INSERT'] ? 'C' :
                            ($parsed['SELECT'] ? 'R' :
                            ($parsed['UPDATE'] ? 'U' :
                            ($parsed['DELETE'] ? 'D' : ''))));

                $tables = $parsed['FROM'] ?? $parsed['INTO'] ?? $parsed['UPDATE'] ?? $parsed['DELETE'];
                if (!is_array($tables)) return;

                foreach ($tables as $tbl) {
                    $tableName = $tbl['table'] ?? null;
                    if ($tableName) {
                        $this->results[] = [
                            'file' => $this->file,
                            'table' => $tableName,
                            'C' => $crudType === 'C' ? '○' : '',
                            'R' => $crudType === 'R' ? '○' : '',
                            'U' => $crudType === 'U' ? '○' : '',
                            'D' => $crudType === 'D' ? '○' : '',
                        ];
                    }
                }
            }
        }
    }

    public function getResults(): array {
        return $this->results;
    }
}

// 実行
$targetFile = $argv[1] ?? null;
if (!$targetFile || !file_exists($targetFile)) {
    echo "Usage: php file_crud_analyzer.php path/to/target.php\n";
    exit(1);
}

$code = file_get_contents($targetFile);
$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP8);
$ast = $parser->parse($code);

$traverser = new NodeTraverser();
$visitor = new FileCRUDVisitor($targetFile);
$traverser->addVisitor($visitor);
$traverser->traverse($ast);

// 出力
foreach ($visitor->getResults() as $row) {
    echo implode("\t", [$row['file'], $row['table'], $row['C'], $row['R'], $row['U'], $row['D']]) . PHP_EOL;
}\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

// 実行時引数
if ($argc < 2) {
    echo "Usage: php analyzer.php [target_directory]\n";
    exit(1);
}
$targetDir = $argv[1];
if (!is_dir($targetDir)) {
    echo "指定されたディレクトリが存在しません。\n";
    exit(1);
}
$extensions = ['php', 'inc', 'html', 'js'];

// コメント除去
function strip_comments($content, $ext) {
    if (in_array($ext, ['php', 'inc'])) {
        $output = '';
        $tokens = token_get_all($content);
        foreach ($tokens as $token) {
            if (is_array($token)) {
                list($id, $text) = $token;
                if (in_array($id, [T_COMMENT, T_DOC_COMMENT])) continue;
                $output .= $text;
            } else {
                $output .= $token;
            }
        }
        return $output;
    }
    if ($ext === 'html') return preg_replace('/<!--.*?-->/s', '', $content);
    if ($ext === 'js') {
        $content = preg_replace('!//.*!', '', $content);
        return preg_replace('!/\\*.*?\\*/!s', '', $content);
    }
    return $content;
}

// ファイル走査
function analyze_files($root, $extensions) {
    $results = [];
    $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($root, FilesystemIterator::SKIP_DOTS));
    foreach ($iterator as $file) {
        if ($file->isFile()) {
            $ext = strtolower($file->getExtension());
            if (in_array($ext, $extensions)) {
                $relativePath = ltrim(str_replace(realpath($root), '', realpath($file->getPathname())), '/\\');
                $rawContent = file_get_contents($file->getPathname());
                $cleanedContent = strip_comments($rawContent, $ext);
                $results[$relativePath] = $cleanedContent;
            }
        }
    }
    return $results;
}

// 定数展開
function extract_define_constants($files) {
    $constants = [];
    $regex = '/define\\s*\\(\\s*[\'"]([A-Z0-9_]+)[\'"]\\s*,\\s*[\'"]([^\'"]+)[\'"]\\s*\\)\\s*;/i';
    foreach ($files as $code) {
        if (preg_match_all($regex, $code, $matches)) {
            foreach ($matches[1] as $i => $key) {
                $constants[$key] = $matches[2][$i];
            }
        }
    }
    return $constants;
}

function apply_constants_to_code($files, $constants) {
    foreach ($files as $path => &$code) {
        foreach ($constants as $const => $value) {
            $code = preg_replace("/\\b" . preg_quote($const, '/') . "\\b/", $value, $code);
        }
    }
    return $files;
}

// SQL抽出 + CRUD分類（ファイル単位）
function extract_sql_crud_operations($files) {
    $results = [];
    $sqlPattern = '/\\b(SELECT|INSERT\\s+INTO|UPDATE|DELETE\\s+FROM)\\b.*?;/is';
    $tablePattern = '/\\bFROM\\s+([a-zA-Z0-9_\\\"\\.]+)|\\bINTO\\s+([a-zA-Z0-9_\\\"\\.]+)|\\bUPDATE\\s+([a-zA-Z0-9_\\\"\\.]+)/i';
    foreach ($files as $path => $code) {
        $crud = [];
        if (preg_match_all($sqlPattern, $code, $matches)) {
            foreach ($matches[0] as $sql) {
                $type = strtoupper(trim(strtok($sql, " ")));
                if (preg_match($tablePattern, $sql, $tmatches)) {
                    $table = $tmatches[1] ?: $tmatches[2] ?: $tmatches[3];
                    $table = trim($table, '\"');
                    if (!isset($crud[$table])) $crud[$table] = ['C' => '', 'R' => '', 'U' => '', 'D' => ''];
                    if ($type === 'SELECT') $crud[$table]['R'] = '○';
                    if (strpos($type, 'INSERT') === 0) $crud[$table]['C'] = '○';
                    if ($type === 'UPDATE') $crud[$table]['U'] = '○';
                    if ($type === 'DELETE') $crud[$table]['D'] = '○';
                }
            }
        }
        if (!empty($crud)) $results[$path] = $crud;
    }
    return $results;
}

// 関数単位のCRUD解析
function extract_function_sql_crud($files) {
    $results = [];
    $funcPattern = '/function\\s+(\\w+)\\s*\\([^)]*\\)\\s*\\{(.*?)\\}/is';
    $sqlPattern = '/\\b(SELECT|INSERT\\s+INTO|UPDATE|DELETE\\s+FROM)\\b.*?;/is';
    $tablePattern = '/\\bFROM\\s+([a-zA-Z0-9_\\\"\\.]+)|\\bINTO\\s+([a-zA-Z0-9_\\\"\\.]+)|\\bUPDATE\\s+([a-zA-Z0-9_\\\"\\.]+)/i';
    foreach ($files as $path => $code) {
        if (preg_match_all($funcPattern, $code, $matches, PREG_SET_ORDER)) {
            foreach ($matches as $func) {
                $fname = $func[1]; $body = $func[2]; $crud = [];
                if (preg_match_all($sqlPattern, $body, $sqls)) {
                    foreach ($sqls[0] as $sql) {
                        $type = strtoupper(trim(strtok($sql, " ")));
                        if (preg_match($tablePattern, $sql, $tmatches)) {
                            $table = $tmatches[1] ?: $tmatches[2] ?: $tmatches[3];
                            $table = trim($table, '\"');
                            if (!isset($crud[$table])) $crud[$table] = ['C' => '', 'R' => '', 'U' => '', 'D' => ''];
                            if ($type === 'SELECT') $crud[$table]['R'] = '○';
                            if (strpos($type, 'INSERT') === 0) $crud[$table]['C'] = '○';
                            if ($type === 'UPDATE') $crud[$table]['U'] = '○';
                            if ($type === 'DELETE') $crud[$table]['D'] = '○';
                        }
                    }
                }
                if (!empty($crud)) $results[$fname . '@' . $path] = $crud;
            }
        }
    }
    return $results;
}

// include/require解析
function extract_includes($files) {
    $results = [];
    $regex = '/\\b(include|require)(_once)?\\s*\\(?(.*?)\\)?\\s*;/i';
    foreach ($files as $path => $code) {
        if (preg_match_all($regex, $code, $matches, PREG_SET_ORDER)) {
            foreach ($matches as $match) {
                $target = trim($match[3]);
                if (!isset($results[$path])) $results[$path] = [];
                $results[$path][] = $target;
            }
        }
    }
    return $results;
}

// フロントエンドアクセス解析
function extract_frontend_access($files) {
    $results = [];
    foreach ($files as $path => $code) {
        $entry = [
            'action' => [], 'location.href' => [], 'window.open' => [], 'XMLHttpRequest' => []
        ];
        if (preg_match_all('/action\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']/', $code, $m)) $entry['action'] = $m[1];
        if (preg_match_all('/location\\.href\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']/', $code, $m)) $entry['location.href'] = $m[1];
        if (preg_match_all('/window\\.open\\s*\\(\\s*[\"\\']([^\"\\']+)[\"\\']/', $code, $m)) $entry['window.open'] = $m[1];
        if (preg_match_all('/new\\s+XMLHttpRequest\\s*\\(\\s*\\)/', $code)) $entry['XMLHttpRequest'][] = 'found';
        if (array_filter($entry)) $results[$path] = $entry;
    }
    return $results;
}

// Excel出力処理
function output_excel($fileCrud, $functionCrud, $includeMap, $frontendMap, $outputPath = 'analysis_result.xlsx') {
    $spreadsheet = new Spreadsheet();
    $sheet1 = $spreadsheet->getActiveSheet();
    $sheet1->setTitle('File-CRUD');

    $row = 1;
    foreach ($fileCrud as $file => $tables) {
        $sheet1->setCellValue("A{$row}", "[{$file}]"); $row++;
        $sheet1->fromArray(['テーブル名', 'C', 'R', 'U', 'D'], null, "A{$row}"); $row++;
        foreach ($tables as $table => $flags) {
            $sheet1->fromArray(array_merge([$table], array_values($flags)), null, "A{$row}"); $row++;
        }
        $row++;
    }

    $sheet2 = $spreadsheet->createSheet()->setTitle('Function-CRUD');
    $sheet2->fromArray(['関数名@ファイル名', 'テーブル名', 'C', 'R', 'U', 'D'], null, 'A1');
    $row = 2;
    foreach ($functionCrud as $func => $tables) {
        foreach ($tables as $table => $flags) {
            $sheet2->fromArray(array_merge([$func, $table], array_values($flags)), null, "A{$row}"); $row++;
        }
    }

    $sheet3 = $spreadsheet->createSheet()->setTitle('Include-Relations');
    $sheet3->fromArray(['ファイル名', 'include_1', 'include_2', '...'], null, 'A1');
    $row = 2;
    foreach ($includeMap as $file => $includes) {
        $sheet3->fromArray(array_merge([$file], $includes), null, "A{$row}"); $row++;
    }

    $sheet4 = $spreadsheet->createSheet()->setTitle('Frontend-Access');
    $sheet4->fromArray(['ファイル名', 'action', 'location.href', 'window.open', 'XMLHttpRequest'], null, 'A1');
    $row = 2;
    foreach ($frontendMap as $file => $types) {
        $rowData = [$file];
        foreach (['action', 'location.href', 'window.open', 'XMLHttpRequest'] as $key) {
            $rowData[] = implode(", ", $types[$key] ?? []);
        }
        $sheet4->fromArray($rowData, null, "A{$row}"); $row++;
    }

    $writer = new Xlsx($spreadsheet);
    $writer->save($outputPath);
    echo "Excelファイル出力完了: {$outputPath}\n";
}

// === 実行 ===
$cleanedFiles = analyze_files($targetDir, $extensions);
$constants = extract_define_constants($cleanedFiles);
$expandedFiles = apply_constants_to_code($cleanedFiles, $constants);
$sqlCrudResults = extract_sql_crud_operations($expandedFiles);
$functionCrudResults = extract_function_sql_crud($expandedFiles);
$includeResults = extract_includes($expandedFiles);
$frontendAccessResults = extract_frontend_access($expandedFiles);

output_excel($sqlCrudResults, $functionCrudResults, $includeResults, $frontendAccessResults);
