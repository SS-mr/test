# PHP静的解析ツール 実装手順書

## 1. 前提環境の準備
1. PHP 7.4 以上（CLI）をインストール
2. Composer をインストール（https://getcomposer.org/）
3. ターミナルで作業用ディレクトリを作成し移動

## 2. リポジトリ構成
```
analyzer/
├─ vendor/                  # Composer 依存
├─ analyzer.php             # エントリーポイント
└─ README.md                # プロジェクト概要
```

## 3. 依存ライブラリのインストール
```
composer require nikic/php-parser:^4.0                  greenlion/php-sql-parser:^4.0                  phpoffice/phpspreadsheet:^1.28
```

## 4. 雛形コードの配置
- `analyzer.php` に canvas 上で提供した雛形コードを配置

## 5. scanDirectory() の実装
1. `scandir()` でファイル/ディレクトリ一覧を取得
2. 再帰呼び出しでサブディレクトリを探索
3. 正規表現で対象拡張子(.php/.inc/.html/.js)を判定
4. 見つかったファイルを `parseFile($path, $relative)` へ渡す
5. (一覧を出力)

## 6. stripComments() の実装
- 正規表現で:
  - `/* ... */`
  - `// ...`
  - `<!-- ... -->`
  をすべて除去
- (除去したソースを出力)

## 7. collectConstants() の実装
- `define('NAME','value')`
- `const NAME = 'value';`
 の二つのパターンを `preg_match_all` で検出し、マップに格納
- JSのconstを誤って検知しないようにする
- (格納した結果を出力)

## 8. processAst() の実装
1. `ParserFactory::PREFER_PHP5` で AST を生成
2. `NodeTraverser` + `NodeVisitorAbstract` を用意
3. 下記ノードを検出してコレクションに追加
   - `Node\Stmt\Class_` → `ClassDef`
   - `Node\Stmt\Function_` → `FunctionDef`
   - `Node\Stmt\ClassMethod` → `FunctionDef`
   - `Node\Expr\MethodCall` / `Node\Expr\FuncCall` (query系) → `SqlStatement` と `CrudOperation`
     - 定数展開 `expandConstantsInSql()`
     - PHPSQLParser でパース → パース結果を `SqlStatement` に格納
     - CRUD 分類、テーブルエイリアス検出、サブクエリ判定
- 作業重そう、テストこまめに

## 9. extractDependencies() の実装
- `preg_match_all` で以下を検出
  - `include` / `require` / `require_once`
  - `form action=...`
  - `href="..."`
  - `fetch('...')`
  - `window.open('...')`
- 行番号取得のため `PREG_OFFSET_CAPTURE` や AST から `getStartLine()` を活用
- (結果を出力)

## 10. extractSqlStatements() の実装（任意）
- AST で拾えない動的 SQL を補完
- 正規表現で `SELECT`, `INSERT`, `UPDATE`, `DELETE` を検出し `SqlStatement` を追加

## 11. generateExcel() の実装
1. `new Spreadsheet()`
2. CRUD シート:
   - ヘッダー行を `fromArray()`
   - `$this->crudOps` をループし `setCellValue()`
3. SQLs シート:
   - ヘッダー行
   - `$this->sqls` をループ
4. Dependencies, Classes, Functions, Errors 各シートを同様に作成
5. Summary シート:
   - ファイル数 = 走査したファイル数
   - クラス数 = `count($this->classes)`
   - 関数数 = `count($this->functions)`
   - SQL数 = `count($this->sqls)`
   - CRUD別件数 = 集計
   - 依存関係数 = `count($this->dependencies)`

## 12. テストとデバッグ
1. サンプル PHP プロジェクトを用意
2. `php analyzer.php sample-project` 実行
3. `analysis_results.xlsx` を開き、各シートを確認
4. エラー箇所は Errors シートを参照

## 13. 拡張ポイント
- JSON / CSV 出力形式追加
- 関数/ファイル呼び出しグラフ生成
