#!/usr/bin/env php
<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpParser\ParserFactory;

// ── コメント除去ユーティリティ ──
/**
 * コメント除去ユーティリティ（堅牢版）
 *
 * @param string $code 元のコード
 * @return string コメントを除去したコード
 */
function stripComments(string $code): string
{
    // HTML コメント
    $result = @preg_replace('/<!--.*?-->/s', '', $code);
    if ($result === null) {
        // エラーが起きたら元コードを返す
        $result = $code;
    }

    // C／PHP ブロックコメント
    $tmp = @preg_replace('/\/\*.*?\*\//s', '', $result);
    if ($tmp !== null) {
        $result = $tmp;
    }

    // 行コメント (//… )
    $tmp = @preg_replace('/\/\/.*$/m', '', $result);
    if ($tmp !== null) {
        $result = $tmp;
    }

    // 行コメント (#… )
    $tmp = @preg_replace('/#.*$/m', '', $result);
    if ($tmp !== null) {
        $result = $tmp;
    }

    return $result;
}

// ガベージコレクション有効化
gc_enable();

// 引数チェック
if ($argc < 3) {
    fwrite(STDERR, "Usage: php analyzer.php <target_dir> <output.xlsx>\n");
    exit(1);
}
$targetDir  = rtrim($argv[1], "/\\");
$outputFile = $argv[2];
if (!is_dir($targetDir)) {
    fwrite(STDERR, "Error: '{$targetDir}' is not a directory.\n");
    exit(1);
}

// 将来の AST 用意（今回は未使用だがインスタンス化のみ）
$parser = (new ParserFactory())->createForNewestSupportedVersion();

// スプレッドシート準備
$spreadsheet = new Spreadsheet();
$sheet       = $spreadsheet->getActiveSheet();
$sheet->setTitle('CRUD Results');
$sheet->fromArray(['File', 'Table', 'C', 'R', 'U', 'D'], null, 'A1');

$row      = 2;
$prevFile = null;

// 対象拡張子リスト
$exts = ['php','inc','html','js'];

// ── ファイルループ ──
$rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($targetDir));
foreach ($rii as $file) {
    if (!$file->isFile()) {
        continue;
    }
    $ext = strtolower($file->getExtension());
    if (!in_array($ext, $exts, true)) {
        continue; // php, inc, html, js のみ対象
    }

    $relPath = substr($file->getPathname(), strlen($targetDir) + 1);
    $raw     = file_get_contents($file->getPathname());
    // 全コメント除去
    $clean   = stripComments($raw);
    $crudMap = analyzeCrud($clean);

    foreach ($crudMap as $table => $ops) {
        if ($relPath !== $prevFile) {
            if ($prevFile !== null) {
                $row++;  // ファイル間に空行
            }
            $sheet->setCellValue("A{$row}", $relPath);
            $prevFile = $relPath;
        }
        $sheet->setCellValue("B{$row}", $table);
        $sheet->setCellValue("C{$row}", $ops['C'] ? '○' : '');
        $sheet->setCellValue("D{$row}", $ops['R'] ? '○' : '');
        $sheet->setCellValue("E{$row}", $ops['U'] ? '○' : '');
        $sheet->setCellValue("F{$row}", $ops['D'] ? '○' : '');
        $row++;
    }

    unset($raw, $clean, $crudMap);
    gc_collect_cycles();
}

// 出力
$writer = new Xlsx($spreadsheet);
$writer->save($outputFile);
echo "✔ {$outputFile} を生成しました。\n\n";


/**
 * 拡張版 analyzeCrud(): 
 *  - SQL コメント除去
 *  - テーブルエイリアス検出＆解決
 *  - CRUD／JOIN／FROM／DROP／TRUNCATE 検出
 */
function analyzeCrud(string $content): array
{
    $map           = [];
    $aliasMap      = [];
    $sqlStatements = [];

    // 1) 文字列連結を含む SQL 文の収集
    if (preg_match_all(
        '/\$([A-Za-z_][A-Za-z0-9_]*)\s*=\s*[\'"](.+?)[\'"];/s',
        $content,
        $mInit,
        PREG_SET_ORDER
    )) {
        foreach ($mInit as $m) {
            $sqlStatements[] = ['var' => $m[1], 'sql' => $m[2]];
        }
    }
    if (preg_match_all(
        '/\$([A-Za-z_][A-Za-z0-9_]*)\s*\.\=\s*[\'"](.+?)[\'"];/s',
        $content,
        $mAppend,
        PREG_SET_ORDER
    )) {
        foreach ($mAppend as $m) {
            for ($i = count($sqlStatements) - 1; $i >= 0; $i--) {
                if ($sqlStatements[$i]['var'] === $m[1]) {
                    $sqlStatements[$i]['sql'] .= $m[2];
                    break;
                }
            }
        }
    }

    // 2) 各 SQL 文ごとの解析
    foreach ($sqlStatements as $stmt) {
        // (a) SQL 内コメントを除去
        $sql = preg_replace('!/\*.*?\*/|--.*?$|#.*?$!ms', '', $stmt['sql']);

        // (b) エイリアス定義検出
        if (preg_match_all(
            '/\b(?:FROM|JOIN)\s+`?([A-Za-z0-9_]+)`?\s+(?:AS\s+)?`?([A-Za-z0-9_]+)`?/i',
            $sql,
            $mAlias,
            PREG_SET_ORDER
        )) {
            foreach ($mAlias as $ma) {
                $aliasMap[$ma[2]] = $ma[1];
            }
        }

        // (c) DROP / TRUNCATE → D
        foreach (['DROP','TRUNCATE'] as $kw) {
            if (preg_match_all("/\\b{$kw}\\s+TABLE\\s+`?([A-Za-z0-9_]+)`?/i", $sql, $m)) {
                foreach ($m[1] as $tbl) {
                    $map[$tbl]['D'] = true;
                }
            }
        }
        // (d) INSERT INTO / SELECT … INTO TEMP → C
        if (preg_match_all(
            '/INSERT\s+INTO\s+`?([A-Za-z0-9_]+)`?|\bSELECT\b.*?\bINTO\s+TEMP(?:ORARY)?\s+`?([A-Za-z0-9_]+)`?/i',
            $sql,
            $m,
            PREG_SET_ORDER
        )) {
            foreach ($m as $mm) {
                $tbl = $mm[1] ?: ($mm[2] ?? null);
                if ($tbl) $map[$tbl]['C'] = true;
            }
        }
        // (e) UPDATE → U
        if (preg_match_all('/\bUPDATE\s+`?([A-Za-z0-9_]+)`?/i', $sql, $m)) {
            foreach ($m[1] as $tbl) {
                $map[$tbl]['U'] = true;
            }
        }
        // (f) DELETE FROM → D
        if (preg_match_all('/\bDELETE\s+FROM\s+`?([A-Za-z0-9_]+)`?/i', $sql, $m)) {
            foreach ($m[1] as $tbl) {
                $map[$tbl]['D'] = true;
            }
        }
        // (g) JOIN → R
        if (preg_match_all('/\bJOIN\s+`?([A-Za-z0-9_]+)`?/i', $sql, $m)) {
            foreach ($m[1] as $tbl) {
                $map[$tbl]['R'] = true;
            }
        }
        // (h) 汎用 FROM → R
        if (preg_match_all('/\bFROM\s+`?([A-Za-z0-9_]+)`?/i', $sql, $m)) {
            foreach ($m[1] as $tbl) {
                $map[$tbl]['R'] = true;
            }
        }
    }

    // 3) フォールバック：ファイル全体から再検出
    $fb = preg_replace('!/\*.*?\*/|//.*?$|#.*?$|<!--.*?-->!ms', '', $content);
    $fallbacks = [
        'D'=>'/\b(?:DROP|TRUNCATE)\s+TABLE\s+`?([A-Za-z0-9_]+)`?/i',
        'C'=>'/INSERT\s+INTO\s+`?([A-Za-z0-9_]+)`?/i',
        'U'=>'/UPDATE\s+`?([A-Za-z0-9_]+)`?/i',
        'D2'=>'/DELETE\s+FROM\s+`?([A-Za-z0-9_]+)`?/i',
        'R'=>'/\bFROM\s+`?([A-Za-z0-9_]+)`?/i',
        'J'=>'/\bJOIN\s+`?([A-Za-z0-9_]+)`?/i',
    ];
    foreach ($fallbacks as $op => $pat) {
        if (preg_match_all($pat, $fb, $mFb)) {
            foreach ($mFb[1] as $rawTbl) {
                $tbl = $aliasMap[$rawTbl] ?? $rawTbl;
                switch ($op) {
                    case 'C':   $map[$tbl]['C'] = true; break;
                    case 'U':   $map[$tbl]['U'] = true; break;
                    case 'D':
                    case 'D2':  $map[$tbl]['D'] = true; break;
                    case 'R':
                    case 'J':   $map[$tbl]['R'] = true; break;
                }
            }
        }
    }

    // 4) 真偽値で初期化
    foreach ($map as $tbl => $ops) {
        $map[$tbl] = [
            'C' => !empty($ops['C']),
            'R' => !empty($ops['R']),
            'U' => !empty($ops['U']),
            'D' => !empty($ops['D']),
        ];
    }
    return $map;
}