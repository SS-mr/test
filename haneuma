<?php
/**
 * ---------------------------------------------------------------
 *  escape.php
 *
 *  @author SS
 *  @description
 *    SQLクエリ内の未エスケープ変数を自動的にsqlXXXXX()でラップするツール
 *    ・代入の右辺の変数
 *    ・ヒアドキュメント内の変数
 *    ・if文の一行代入の変数
 *    に対応
 * ---------------------------------------------------------------
 */

require_once __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

/* ===============================================================
 *  定数
 * =============================================================== */
// 処理対象となる左辺の変数名（小文字で比較）
const TARGET_LHS_VARS      = ['sql', 'query', 'sql2', 'sq2', 'sql3', 'sq3'];
// 処理対象外とする変数パターン
const EXCLUDE_VAR_PATTERNS = ['\\$sql2', '\\$sq2', '\\$sql3', '\\$sq3'];

/* ===============================================================
 *  0.  ユーティリティ
 * =============================================================== */

/**
 * 文字エンコーディングを変換
 */
function convert_encoding(string $str, string $from = 'EUC-JP', string $to = 'UTF-8'): string
{
    if (mb_detect_encoding($str, 'UTF-8', true)) {
        return $str;
    }
    return mb_convert_encoding($str, $to, $from);
}

/**
 * プログレスバーを 0-100% で表示
 */
function show_progress(int $current, int $total, string $msg = ''): void
{
    static $lastLen = 0;

    $rate = $total === 0 ? 0 : (int)round($current / $total * 100);
    $bar  = str_pad(str_repeat('=', $rate), 100);
    $line = "\r[{$bar}] {$rate}% " . convert_encoding($msg);
    echo $line . str_repeat(' ', max(0, $lastLen - mb_strlen($line)));
    $lastLen = mb_strlen($line);
    if ($current >= $total) echo PHP_EOL;
}

/**
 * 再帰的に *.php / *.inc ファイルを収集
 */
function collect_source_files(string $root): array
{
    $it = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($root, FilesystemIterator::SKIP_DOTS)
    );
    $paths = [];
    foreach ($it as $file) {
        if (\in_array($file->getExtension(), ['php', 'inc'], true)) {
            $paths[] = $file->getPathname();
        }
    }
    sort($paths);
    return $paths;
}

/**
 * $target を $base からの相対パスへ変換
 */
function relpath(string $base, string $target): string
{
    return ltrim(str_replace($base, '', $target), DIRECTORY_SEPARATOR);
}

/* ===============================================================
 *  1.  変数ラップ処理本体
 * =============================================================== */

/**
 * 変換対象のコンテキストを定義
 * ・代入の右辺（ASSIGNMENT_RIGHT）
 * ・ヒアドキュメント内（HEREDOC）
 * ・ナウドキュメント内（NOWDOC）- 処理対象外
 */
class ConversionContext {
    public const ASSIGNMENT_RIGHT = 'assignment_right';  // 代入の右辺
    public const HEREDOC = 'heredoc';                    // ヒアドキュメント内
    public const NOWDOC = 'nowdoc';                      // ナウドキュメント内（処理対象外）

    private static array $contexts = [
        self::ASSIGNMENT_RIGHT => true,  // 処理対象
        self::HEREDOC => true,          // 処理対象
        self::NOWDOC => false,          // 処理対象外
    ];

    public static function isTarget(string $context): bool {
        return self::$contexts[$context] ?? false;
    }

    public static function addContext(string $context, bool $isTarget = true): void {
        self::$contexts[$context] = $isTarget;
    }
}

/**
 * 1 ファイル分の置換を行い、変更行をログに格納して返す
 *
 * @param string $content 処理対象のファイル内容
 * @param string $relPath 相対パス（ログ用）
 * @param array $excludePatterns 除外パターン
 * @param array $lhsTargets 処理対象の左辺変数
 * @return array{processed:string, logRows:array<array{0:string,1:int,2:string,3:string}>}
 */
function process_file(
    string $content,
    string $relPath,
    array  $excludePatterns = EXCLUDE_VAR_PATTERNS,
    array  $lhsTargets      = TARGET_LHS_VARS
): array {
    // 文字エンコーディングを変換（EUC-JP → UTF-8）
    $content = convert_encoding($content);

    // ---------- 正規表現パターンの準備 ----------
    //   $foo, $arr['x'], $_POST['id'] などの変数パターン
    $varPattern = '/\$[A-Za-z_\x80-\xff][A-Za-z0-9_\x80-\xff]*(?:\[[^\]]+\])*/u';

    // ---------- 行ベースの解析 ----------
    $lines  = explode("\n", $content);
    $total  = \count($lines);
    $log    = [];

    $inDoc  = false;              // HEREDOC / NOWDOC内部かどうか
    $docEnd = '';                 // 終了ラベル
    $docIsNow = false;            // NOWDOC フラグ
    $currentContext = null;       // 現在のコンテキスト

    $lhsTargetsLC = array_map('strtolower', $lhsTargets);

    foreach ($lines as $idx => &$line) {
        // 100行ごとに進捗表示
        if ($idx % 100 === 0) show_progress($idx, $total, $relPath);

        $originalLine = $line;
        $modifiedLine = $line;

        /* ---- (1) 代入の右辺判定 ---- */
        // if文の一行代入も含めて判定
        $assignPrefix = $assignLhs = $assignOp = $assignSuffix = null;
        if (preg_match('/^(\s*(?:if\s*\([^)]+\)\s*)?)(\$[A-Za-z_\x80-\xff][A-Za-z0-9_\x80-\xff]*(?:\[[^\]]+\])*)\s*(=|\.=)\s*(.+?)(\s*)$/u', $line, $m)) {
            [, $assignPrefix, $assignLhs, $assignOp, $rhs, $assignSuffix] = $m;
            
            $lhsName = strtolower(ltrim($assignLhs, '$'));
            if (in_array($lhsName, $lhsTargetsLC, true)) {
                $currentContext = ConversionContext::ASSIGNMENT_RIGHT;
                $modifiedLine = $rhs;
            } else {
                $currentContext = null;
            }
        }

        /* ---- (2) HEREDOC/NOWDOC 開始判定 ---- */
        // ヒアドキュメントの開始行を検出
        if (!$inDoc &&
            preg_match('/^\s*(\$[A-Za-z_\x80-\xff][A-Za-z0-9_\x80-\xff]*)?\s*(=|\.=)?\s*<<<(?P<q>[\'"]?)(?P<label>[A-Za-z_][A-Za-z0-9_]*)\k<q>/u', $line, $m)
        ) {
            $lhsName = isset($m[1]) ? strtolower(ltrim($m[1], '$')) : '';
            $docIsTarget = in_array($lhsName, $lhsTargetsLC, true);
            $inDoc = true;
            $docEnd = $m['label'];
            $docIsNow = ($m['q'] === '\'');
            // 左辺の変数名が対象の場合のみ処理
            $currentContext = $docIsNow ? ConversionContext::NOWDOC : ($docIsTarget ? ConversionContext::HEREDOC : null);
            // 開始行を保持（変数名を含む）
            $line = $originalLine;
        }

        /* ---- (3) HEREDOC/NOWDOC 終了判定 ---- */
        // ヒアドキュメントの終了行を検出
        if ($inDoc && preg_match('/^' . preg_quote($docEnd, '/') . ';?\s*$/', trim($line))) {
            $inDoc = false;
            $line = $docEnd;  // 終了ラベルのみを保持
            $docEnd = '';
            $docIsNow = false;
            $currentContext = null;
            continue;
        }

        /* ---- (4) 変換対象コンテキストの場合のみ処理 ---- */
        if ($currentContext && ConversionContext::isTarget($currentContext)) {
            /* ---- (4-1) 1 行内の変数候補を抽出 ---- */
            preg_match_all($varPattern, $modifiedLine, $matches);
            $candidates = array_unique($matches[0]);

            foreach ($candidates as $var) {
                // a) 除外リストに一致する変数はスキップ
                foreach ($excludePatterns as $pat) {
                    if (preg_match('/^' . $pat . '$/u', $var)) {
                        continue 2;   // 外側 foreach ($candidates...) へ
                    }
                }

                // b) 既に sql*() で包まれている変数はスキップ
                $alreadyWrapped = preg_match(
                    '/sql\w+\s*\(\s*' . preg_quote($var, '/') . '\s*\)/ui',
                    $modifiedLine
                );
                if ($alreadyWrapped) continue;

                /* ---- (4-2) ブレース付き変数 "{$var}" への特別対応 ---- */
                $braced = '\{\$' . preg_quote(ltrim($var, '$'), '/') . '\}';
                if (preg_match('/"' . $braced . '"/u', $modifiedLine)) {
                    $modifiedLine = preg_replace(
                        '/"' . $braced . '"/u',
                        'sqlXXXXX({$0})',   // {$0} = {$var}
                        $modifiedLine
                    );
                    continue;
                }

                /* ---- (4-3) 通常の変数 $var をラップ ---- */
                $modifiedLine = preg_replace(
                    '/(?<![A-Za-z0-9_\x80-\xff])' . preg_quote($var, '/') . '(?![A-Za-z0-9_\x80-\xff])/u',
                    'sqlXXXXX(' . $var . ')',
                    $modifiedLine
                );
            }
        }

        /* ---- (5) 代入の右辺を元の行に戻す ---- */
        if ($currentContext === ConversionContext::ASSIGNMENT_RIGHT) {
            // 取得済みの各要素で再構築（if文の一行代入も正しく処理）
            $line = $assignPrefix . $assignLhs . ' ' . $assignOp . ' ' . $modifiedLine . $assignSuffix;
        } else {
            $line = $modifiedLine;
        }

        /* ---- (6) ログ記録 ---- */
        if ($originalLine !== $line) {
            // sqlXXXXXが含まれる行のみをログに記録
            if (strpos($line, 'sqlXXXXX') !== false) {
                $log[] = [
                    convert_encoding($relPath),
                    $idx + 1,
                    convert_encoding($originalLine),
                    convert_encoding($line)
                ];
            }
        }
    }
    // 進捗完了
    show_progress($total, $total, $relPath);

    return ['processed' => implode("\n", $lines), 'logRows' => $log];
}

/* ===============================================================
 *  2.  CLI エントリーポイント
 * =============================================================== */

function main(array $argv = []): void
{
    if (count($argv) < 2) {
        // テストモードの場合は処理をスキップ
        if (defined('PHPUNIT_COMPOSER_INSTALL') || empty($argv)) {
            return;
        }
        
        fwrite(STDERR, "使用方法: php escape.php <scan_dir>\n");
        exit(1);
    }

    [$self, $scanDir] = $argv;
    $scanDir   = realpath($scanDir) ?: $scanDir;
    $outputDir = __DIR__ . '/escapedAiriku';
    if (!is_dir($outputDir)) mkdir($outputDir, 0777, true);

    /* ---------- 収集 ---------- */
    echo "📂 スキャン対象: {$scanDir}\n";
    $files = collect_source_files($scanDir);
    echo "   → " . \count($files) . " ファイルを発見\n";

    /* ---------- 上書き確認 ---------- */
    $relFiles = array_map(fn($f) => relpath($scanDir, $f), $files);
    $overwrite = check_existing_files($outputDir, $relFiles);
    if (!$overwrite) {
        echo "🚫 中止しました\n";
        return;
    }

    /* ---------- 置換処理 ---------- */
    $start = microtime(true);
    $allLogs = [];
    foreach ($files as $index => $path) {
        $rel = relpath($scanDir, $path);
        $src = file_get_contents($path);
        ['processed' => $dst, 'logRows' => $rows] = process_file($src, $rel);

        // 差分の有無に関わらずファイルを出力
        $outPath = $outputDir . DIRECTORY_SEPARATOR . $rel;
        if (!is_dir(dirname($outPath))) {
            mkdir(dirname($outPath), 0777, true);
        }
        file_put_contents($outPath, $dst);
        if ($rows) {
            $allLogs = array_merge($allLogs, $rows);
        }
    }

    /* ---------- Excel ログ ---------- */
    echo "\n📑 Excel ログを作成中...\n";
    $logName = export_excel_log($allLogs);

    /* ---------- 終了通知 ---------- */
    $elapsed = round(microtime(true) - $start, 2);
    echo "✅ 完了 (処理時間: {$elapsed}s)\n";
    echo "   ・変更対象ファイル数: " . \count(array_unique(array_column($allLogs, 0))) . "\n";
    echo "   ・Excel ログ        : {$logName}\n";
}

/* ===============================================================
 *  実行
 * =============================================================== */
// PHPUnitからの実行時は自動実行しない
if (!defined('PHPUNIT_COMPOSER_INSTALL')) {
    main($argv);
}

/* ---------------------------------------------------------------
 *  補助関数  : check_existing_files
 * --------------------------------------------------------------- */
function check_existing_files(string $outDir, array $relPaths): bool
{
    $dupes = [];
    foreach ($relPaths as $p) {
        $outPath = $outDir . DIRECTORY_SEPARATOR . $p;
        if (is_file($outPath)) $dupes[] = $p;
    }
    if (!$dupes) return true;

    echo "⚠️  既に存在するファイルがあります (計 " . count($dupes) . ")\n";
    foreach ($dupes as $p) echo "   - {$p}\n";
    echo "上書きしてもよろしいですか？ (yes/no): ";
    $ans = trim(fgets(STDIN));
    return strtolower($ans) === 'yes';
}

/* ===============================================================
 *  2. Excel ログ出力
 * =============================================================== */
/**
 * 変更ログをExcelファイルに出力する
 * 
 * PhpSpreadsheetライブラリを使用して、変更内容をExcelファイルに出力
 * 出力されるExcelファイルには以下の列が含まれる
 * - ファイルパス：変更が行われたファイルの相対パス
 * - 行番号：変更が行われた行番号
 * - 変更前：元のコード行
 * - 変更後：sqlXXXXX()でラップされた後のコード行
 * 
 * @param array $rows 変更ログの配列
 *                   各要素は [ファイルパス, 行番号, 変更前, 変更後] の形式
 * @return string 生成されたExcelファイルの名前（log_YYYYMMDD_HHMMSS.xlsx形式）
 * 
 * @uses PhpOffice\PhpSpreadsheet\Spreadsheet
 * @uses PhpOffice\PhpSpreadsheet\Writer\Xlsx
 */
function export_excel_log(array $rows): string
{
    // ヘッダー行を追加
    $data    = [['ファイルパス', '行番号', '変更前', '変更後']];
    $data    = array_merge($data, $rows);
    $logName = 'log_' . date('Ymd_His') . '.xlsx';

    // スプレッドシートの作成と設定
    $wb = new Spreadsheet();
    $ws = $wb->getActiveSheet();
    $ws->fromArray($data, null, 'A1', true);
    $ws->setTitle('Log', false);

    // Excelファイルの出力
    $writer = new Xlsx($wb);
    $writer->setPreCalculateFormulas(false);  // パフォーマンス最適化
    $writer->save($logName);

    // メモリ解放
    $wb->disconnectWorksheets();
    unset($wb);

    return $logName;
}
