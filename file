#!/usr/bin/env php
<?php
/**
 * crud_one_sheet.php – フォールバック付き最終版
 * ------------------------------------------------------------
 *   1) PHP/INC を走査し $sql 変数ごとにクエリを復元
 *   2) PHPSQLParser で再帰解析 → CRUD 収集
 *   3) 解析失敗もしくは CRUD 空なら fallbackCrud() で補完
 *   4) 結果を 1 枚の Excel (File,Table,C,R,U,D) に集約
 *
 *   © ChatGPT (o3) 2025-04-30
 */

declare(strict_types=1);
require_once __DIR__ . '/vendor/autoload.php';

use PHPSQLParser\PHPSQLParser;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Settings;

/* ============================================================
 |  0. 共通ユーティリティ
 * ===========================================================*/

/** コメント除去（PHP/HTML）+ 改行 \n 統一 */
function stripComments(string $code): string
{
    $p = [
        '/\/\*.*?\*\//s',             // /**…*/ /*…*/
        '/(?<!:)\/\/.*|#.*$/m',       // //…  #…
        '/<!--.*?-->/s',              // HTML
    ];
    $code = preg_replace($p, ['', '', ''], $code) ?? $code;
    return str_replace(["\r\n", "\r"], "\n", $code);
}

/** define('CONST','val') 収集 */
function collectDefines(string $code): array
{
    preg_match_all(
        '/define\s*\(\s*[\'"]([A-Z0-9_]+)[\'"]\s*,\s*[\'"]([^\'"]+)[\'"]\s*\)/i',
        $code, $m, PREG_SET_ORDER
    );
    return array_column($m, 2, 1);
}

/** include/require の 1 階層パス取得 */
function collectIncludes(string $code, string $base): array
{
    preg_match_all(
        '/\b(include|require)(_once)?\s*\(\s*[\'"]([^\'"]+)[\'"]\s*\)/i',
        $code, $m
    );
    $files = [];
    foreach ($m[3] ?? [] as $p) {
        $abs = realpath($p) ?: realpath("$base/$p");
        if ($abs && is_file($abs)) $files[] = $abs;
    }
    return $files;
}

/**
 * $sql ブロックごとに
 *   ['expr' => 式文字列, 'vars' => 変数スナップショット]
 * を yield
 */
function extractSqlBlocks(string $code): \Generator
{
    $vars = [];
    $cur  = '';

    foreach (explode("\n", $code) as $ln) {

        if (preg_match('/\$([a-zA-Z_][\w]*)\s*=\s*[\'"]([^\'"]*)[\'"]\s*;/', $ln, $m)) {
            $vars[$m[1]] = $m[2];
            continue;
        }

        if (preg_match('/\$(sql)\s*=\s*(.+?);/i', $ln, $m)) {
            if ($cur !== '') yield ['expr'=>$cur,'vars'=>$vars];
            $cur = trim($m[2]);
            continue;
        }

        if (preg_match('/\$(sql)\s*\.\=\s*(.+?);/i', $ln, $m)) {
            $cur .= ' . ' . trim($m[2]);
            continue;
        }

        if ($cur !== '' && strpos($ln, '.=') === false) {
            yield ['expr'=>$cur,'vars'=>$vars];
            $cur = '';
        }
    }
    if ($cur !== '') yield ['expr'=>$cur,'vars'=>$vars];
}

/** ドット連結・sprintf 静的評価（簡易） */
function evalConcat(string $expr, array $const, array $vars): string
{
    if (preg_match('/sprintf\s*\(\s*([\'"])(.+?)\1\s*,\s*(.+)\)$/i', $expr, $m)) {
        $fmt = $m[2];
        $args = array_map(
            fn($a) => evalConcat(trim($a), $const, $vars),
            preg_split('/\s*,\s*/', $m[3])
        );
        return @vsprintf($fmt, $args) ?: '';
    }

    $out = '';
    foreach (preg_split('/\s*\.\s*/', $expr) as $p) {
        $p = trim($p);  if ($p === '') continue;

        if ($p[0]==='"' || $p[0]==="'") {          // 文字列
            $s = stripslashes(substr($p,1,-1));
            if ($p[0]==='"') {
                $s = preg_replace_callback(
                    '/\$([a-zA-Z_][\w]*)/',
                    fn($m) => $vars[$m[1]] ?? $m[0],
                    $s
                );
            }
            $out .= $s; continue;
        }
        if ($p[0]==='$') { $out .= $vars[substr($p,1)] ?? $p; continue; }
        if (isset($const[$p])) { $out .= $const[$p]; continue; }
        $out .= $p;
    }
    return $out;
}

/* ============================================================
 |  1. CRUD 解析
 * ===========================================================*/

/** 再帰でサブクエリまで巡る一次解析 */
function collectCrud(array $tree, string $sql, array &$crud): void
{
    /* 基本 4 文 + 方言 */
    if ($tree['INSERT'] ?? false) {
        $t = $tree['INSERT'][0]['no_quotes']['parts'][0] ?? '';
        if ($t) $crud[$t]['C']=true;
    }
    if ($tree['UPDATE'] ?? false) {
        $t = $tree['UPDATE'][0]['table'] ?? '';
        if ($t) $crud[$t]['U']=true;
    }
    if ($tree['DELETE'] ?? false) {
        $t = $tree['FROM'][0]['table'] ?? '';
        if ($t) $crud[$t]['D']=true;
    }
    if ($tree['SELECT'] ?? false) {
        foreach ($tree['FROM'] ?? [] as $f) {
            $tbl=$f['table']??''; if($tbl) $crud[$tbl]['R']=true;
        }
        if ($tree['INTO'] ?? false) {
            foreach ($tree['INTO'] as $i) {
                $t=$i['table']??''; if(!$t)continue;
                $t=preg_match('/\btemp\b/i',$i['base_expr'])?"{$t}@temp":$t;
                $crud[$t]['C']=true;
            }
        }
    }
    /* JOIN = R */
    foreach ($tree['FROM'] ?? [] as $f) {
        if (!empty($f['join_type'])) {
            $tbl=$f['table']??''; if($tbl) $crud[$tbl]['R']=true;
        }
    }
    /* UPDATE/DELETE + FROM → R (2 件目以降) */
    if (($tree['UPDATE']??false)||($tree['DELETE']??false)) {
        foreach (array_slice($tree['FROM']??[],1) as $f) {
            $tbl=$f['table']??''; if($tbl)$crud[$tbl]['R']=true;
        }
    }
    /* CREATE TEMP TABLE */
    if (($tree['CREATE']??false)&&($tree['TABLE']??false)) {
        $t=$tree['TABLE']['no_quotes']['parts'][0]??'';
        if($t) {$t=preg_match('/\btemp\b/i',$sql)?"{$t}@temp":$t; $crud[$t]['C']=true;}
    }
    /* 再帰探索 (サブクエリ) */
    foreach ($tree as $v) {
        if (is_array($v)) {
            collectCrud($v,'',$crud);
        }
    }
}

/** フォールバック簡易解析（正規表現） */
function fallbackCrud(string $sql): array
{
    $sqlL = strtolower($sql);
    $crud = [];

    // DROP / TRUNCATE
    if (preg_match('/^\s*(drop|truncate)\s+table\s+([a-z0-9_.]+)/i',$sql,$m)) {
        $crud[$m[2]]['D']=true;
        return $crud;
    }
    // CREATE TEMP TABLE
    if (preg_match('/create\s+(temporary|temp)?\s*table\s+([a-z0-9_.]+)/i',$sql,$m)) {
        $t = "{$m[2]}@temp";
        $crud[$t]['C']=true;
        return $crud;
    }
    // INSERT
    if (preg_match('/insert\s+into\s+([a-z0-9_.]+)/i',$sql,$m)) {
        $crud[$m[1]]['C']=true;
    }
    // UPDATE
    if (preg_match('/update\s+([a-z0-9_.]+)/i',$sql,$m)) {
        $crud[$m[1]]['U']=true;
    }
    // DELETE
    if (preg_match('/delete\s+from\s+([a-z0-9_.]+)/i',$sql,$m)) {
        $crud[$m[1]]['D']=true;
    }
    // SELECT & FROM/JOIN
    if (preg_match('/select\b/i',$sqlL) && preg_match('/\bfrom\b(.+?)(where|group|having|order|limit|$)/i',$sql,$m)) {
        $chunk = $m[1];
        preg_match_all('/(?:join|from)\s+([a-z0-9_.]+)/i',$chunk,$tbls);
        foreach ($tbls[1]??[] as $t) $crud[$t]['R']=true;
        // SELECT … INTO TEMP
        if (preg_match('/into\s+temp\s+([a-z0-9_.]+)/i',$sql,$n)) {
            $crud["{$n[1]}@temp"]['C']=true;
        }
    }
    // WITH CTE
    if (preg_match_all('/with\s+([a-z0-9_]+)\s+as\s*\(/i',$sql,$w)) {
        foreach ($w[1] as $cte) $crud["{$cte}@temp"]['C']=true;
    }
    // JOIN outside SELECT (e.g., UPDATE ... FROM)
    if (preg_match_all('/join\s+([a-z0-9_.]+)/i',$sql,$j)) {
        foreach ($j[1] as $t) $crud[$t]['R']=true;
    }
    // UPDATE/DELETE … FROM x
    if (preg_match_all('/\b(from)\s+([a-z0-9_.]+)/i',$sql,$f)) {
        foreach ($f[2] as $t) $crud[$t]['R']=true;
    }

    // 正規化
    foreach ($crud as $tbl=>$ops){
        $crud[$tbl]=array_merge(['C'=>false,'R'=>false,'U'=>false,'D'=>false],$ops);
    }
    return $crud;
}

/* ============================================================
 |  2. メインクラス
 * ===========================================================*/
class CrudOneSheet
{
    private Spreadsheet $book;
    private Worksheet   $sheet;
    private array       $defines=[];
    private array       $visited=[];
    private array       $result =[];

    public function __construct(private string $root)
    {
        Settings::setCache(Settings::CACHE_MEMORY_GZIP);
        $this->book = new Spreadsheet();
        $this->sheet = $this->book->getActiveSheet();
        $this->sheet->setTitle('CRUD');
        $this->sheet->fromArray(['File','Table','C','R','U','D'],null,'A1');
        $this->sheet->freezePane('A2');
    }

    public function run(): void
    {
        foreach ($this->scan($this->root) as $file) {
            $this->defines += $this->collectConst($file);
            $this->analyze($file);
        }
        $this->writeExcel();
        (new Xlsx($this->book))->save(__DIR__.'/crud_one_sheet.xlsx');
        echo "生成完了: ".realpath(__DIR__.'/crud_one_sheet.xlsx').PHP_EOL;
    }

    private function scan(string $dir): array
    {
        $rii=new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir,FilesystemIterator::SKIP_DOTS)
        );
        $out=[];
        foreach($rii as $f){
            if($f->isFile()&&preg_match('/\.(php|inc)$/i',$f->getFilename()))
                $out[]=$f->getRealPath();
        }
        return $out;
    }

    private function collectConst(string $file): array
    {
        if(!empty($this->visited[$file])) return [];
        $this->visited[$file]=true;

        $code=stripComments(file_get_contents($file));
        $defs=collectDefines($code);

        foreach(collectIncludes($code,dirname($file)) as $inc){
            $defs+= $this->collectConst($inc);
        }
        return $defs;
    }

    private function analyze(string $file): void
    {
        $code=stripComments(file_get_contents($file));

        foreach(extractSqlBlocks($code) as $blk){
            $sql = trim(evalConcat($blk['expr'],$this->defines,$blk['vars']));
            if($sql==='') continue;

            $crud=[];
            try{
                $tree=(new PHPSQLParser($sql,true))->parsed;
                collectCrud($tree,$sql,$crud);
            }catch(\Throwable){/* pass */}
            /* フォールバック: パース失敗 or CRUD 空 */
            if(!$crud){
                $crud=fallbackCrud($sql);
            }

            foreach($crud as $tbl=>$ops){
                $this->result[$file][$tbl]=array_merge(
                    $this->result[$file][$tbl]??['C'=>false,'R'=>false,'U'=>false,'D'=>false],
                    $ops
                );
            }
        }
    }

    private function writeExcel(): void
    {
        $row=2;
        foreach($this->result as $file=>$tbls){
            $rel=ltrim(str_replace($this->root,'',$file),DIRECTORY_SEPARATOR);
            $first=true;
            foreach($tbls as $tbl=>$ops){
                $this->sheet->setCellValue("A{$row}",$first?$rel:'');
                $first=false;
                $this->sheet->setCellValue("B{$row}",$tbl);
                $this->sheet->setCellValue("C{$row}",$ops['C']?'✓':'');
                $this->sheet->setCellValue("D{$row}",$ops['R']?'✓':'');
                $this->sheet->setCellValue("E{$row}",$ops['U']?'✓':'');
                $this->sheet->setCellValue("F{$row}",$ops['D']?'✓':'');
                $row++;
            }
            $row++; // 空行
        }
        foreach(['A','B','C','D','E','F'] as $col){
            $this->sheet->getColumnDimension($col)->setAutoSize(true);
        }
    }
}

/* ============================================================
 |  3. 実行エントリ
 * ===========================================================*/
if(php_sapi_name()!=='cli'){
    fwrite(STDERR,"CLI で実行してください\n"); exit(1);
}
$target=$argv[1]??'';
if($target===''||!is_dir($target)){
    fwrite(STDERR,"Usage: php crud_one_sheet.php <target_dir>\n"); exit(1);
}

try{
    (new CrudOneSheet(realpath($target)))->run();
}catch(\Throwable $e){
    fwrite(STDERR,"Fatal: {$e->getMessage()}\n"); exit(1);
}