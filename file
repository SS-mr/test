#!/usr/bin/env php
<?php
declare(strict_types=1);

/**
 * crud_single_sheet.php
 * ──────────────────────────────────────────────────
 *  指定ディレクトリ内の PHP/INC を静的解析し、
 *  ・定数 / 文字列リテラル変数 を収集
 *  ・$sql 変数ごとにクエリを再構築
 *  ・PHPSQLParser で CRUD 判定（PostgreSQL 方言対応）
 *  結果を **1 枚の Excel シート** に集計して保存する。
 *
 *  依存 : greenlion/php-sql-parser
 *        phpoffice/phpspreadsheet
 *
 *  使い方 : php crud_single_sheet.php <target_dir>
 *
 *  © ChatGPT (o3) 2025-04-30
 */

require_once __DIR__ . '/vendor/autoload.php';

use PHPSQLParser\PHPSQLParser;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Settings;

/* --------------------------------------------------
 |  ユーティリティ
 * -------------------------------------------------*/

/**
 * ソースコードから PHP・HTML コメントを除去し、改行を \n に統一
 */
function stripComments(string $code): string
{
    $patterns = [
        '/\/\*.*?\*\//s',            // ブロック /* ... */
        '/(?<!:)\/\/.*|#.*$/m',      // 行 //...  #...
        '/<!--.*?-->/s',             // HTML <!-- ... -->
    ];
    $code = preg_replace($patterns, ['', '', ''], $code) ?? $code;
    return str_replace(["\r\n", "\r"], "\n", $code);
}

/**
 * define('NAME','value') を連想配列化
 *
 * @return array<string,string>
 */
function collectDefines(string $code): array
{
    preg_match_all(
        '/define\s*\(\s*[\'"](?<n>[A-Z0-9_]+)[\'"]\s*,\s*[\'"](?<v>[^\'"]+)[\'"]\s*\)/i',
        $code,
        $m,
        PREG_SET_ORDER
    );
    return array_column($m, 'v', 'n');
}

/**
 * $var = 'literal'; だけを収集（複雑な式は対象外）
 *
 * @return array<string,string>
 */
function collectLiteralVars(string $code): array
{
    preg_match_all(
        '/\$([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*[\'"]([^\'"]*)[\'"]\s*;/',
        $code,
        $m,
        PREG_SET_ORDER
    );
    return array_column($m, 2, 1);  // [varName => value]
}

/**
 * include / require を抽出してファイルパス配列を返す（1階層）
 */
function collectIncludes(string $code, string $base): array
{
    preg_match_all(
        '/\b(include|require)(_once)?\s*\(\s*[\'"]([^\'"]+)[\'"]\s*\)/i',
        $code,
        $m
    );
    $files = [];
    foreach ($m[3] ?? [] as $path) {
        $abs = realpath($path) ?: realpath("$base/$path");
        if ($abs && is_file($abs)) $files[] = $abs;
    }
    return $files;
}

/**
 * $sql 変数の **式** を 1 ステートメントずつ yield
 */
function* extractSqlExpr(string $code): iterable
{
    $cur = '';
    foreach (explode("\n", $code) as $ln) {
        // 代入開始
        if (preg_match('/\$(sql)\s*=\s*(?<e>.+?);/i', $ln, $m)) {
            if ($cur !== '') yield $cur;
            $cur = trim($m['e']);
            continue;
        }
        // 連結 (.=)
        if (preg_match('/\$(sql)\s*\.\=\s*(?<e>.+?);/i', $ln, $m)) {
            $cur .= ' . ' . trim($m['e']);
            continue;
        }
        // ↑以外の行 → flush
        if ($cur !== '' && !preg_match('/\.\=/', $ln)) {
            yield $cur;
            $cur = '';
        }
    }
    if ($cur !== '') yield $cur;
}

/**
 * ドット演算等を静的評価して最終 SQL 文字列を返す（簡易）
 */
function evalConcat(string $expr, array $const, array $vars): string
{
    // "SELECT %s" を sprintf で組み立てる単純型
    if (preg_match('/sprintf\s*\(\s*([\'"])(?<fmt>.+?)\1\s*,\s*(?<args>.+)\)$/i', $expr, $m)) {
        $fmt  = $m['fmt'];
        $args = array_map(
            fn($a) => evalConcat(trim($a), $const, $vars),
            preg_split('/\s*,\s*/', $m['args'])
        );
        return vsprintf($fmt, $args);
    }

    // ドット演算子で分割
    $out = '';
    foreach (preg_split('/\s*\.\s*/', $expr) as $part) {
        $p = trim($part);
        if ($p === '') continue;

        // 文字列リテラル
        if ($p[0] === '"' || $p[0] === "'") {
            $str = stripslashes(substr($p, 1, -1));
            // ダブルクォートなら変数展開
            if ($p[0] === '"') {
                $str = preg_replace_callback('/\$([a-zA-Z_][a-zA-Z0-9_]*)/', fn($m)
                    => $vars[$m[1]] ?? $m[0], $str);
            }
            $out .= $str;
            continue;
        }

        // 変数
        if ($p[0] === '$') {
            $key = substr($p, 1);
            $out .= $vars[$key] ?? $p;
            continue;
        }

        // 定数
        if (isset($const[$p])) {
            $out .= $const[$p];
            continue;
        }

        // そのまま
        $out .= $p;
    }

    return $out;
}

/**
 * PHPSQLParser パース結果 → CRUD 判定
 *
 * @return array<string,array{C:bool,R:bool,U:bool,D:bool}>
 */
function parseCrud(array $tree): array
{
    $crud = [];

    // INSERT
    if ($tree['INSERT'] ?? false) {
        $t = $tree['INSERT'][0]['no_quotes']['parts'][0] ?? '';
        $crud[$t]['C'] = true;
    }
    // UPDATE
    if ($tree['UPDATE'] ?? false) {
        $t = $tree['UPDATE'][0]['table'] ?? '';
        $crud[$t]['U'] = true;
    }
    // DELETE
    if ($tree['DELETE'] ?? false) {
        $t = $tree['FROM'][0]['table'] ?? '';
        $crud[$t]['D'] = true;
    }
    // SELECT ＆ PostgreSQL INTO
    if ($tree['SELECT'] ?? false) {
        foreach ($tree['FROM'] ?? [] as $f) {
            $t = $f['table'] ?? '';
            if ($t !== '') $crud[$t]['R'] = true;
        }
        if ($tree['INTO'] ?? false) {
            foreach ($tree['INTO'] as $i) {
                $t = $i['table'] ?? '';
                if ($t === '') continue;
                $t = preg_match('/\btemp\b/i', $i['base_expr']) ? "{$t}@temp" : $t;
                $crud[$t]['C'] = true;
            }
        }
    }

    // 正規化
    foreach ($crud as $tbl => $ops) {
        $crud[$tbl] = array_merge(['C'=>false,'R'=>false,'U'=>false,'D'=>false], $ops);
    }
    return $crud;
}

/* --------------------------------------------------
 |  メインクラス（単一シート集計）
 * -------------------------------------------------*/
class OneSheetCrudGenerator
{
    private Spreadsheet $book;
    private \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet;

    /** @var array<string,bool> include 追跡 */
    private array $visited = [];
    /** @var array<string,string> 定数キャッシュ */
    private array $globalConst = [];

    /** 結果 [file][table] = ['C'=>bool …] */
    private array $result = [];

    public function __construct(private string $root)
    {
        // Excel 初期設定
        Settings::setCache(Settings::CACHE_MEMORY_GZIP);
        $this->book  = new Spreadsheet();
        $this->sheet = $this->book->getActiveSheet();
        $this->sheet->setTitle('CRUD');
        // ヘッダ
        $this->sheet->fromArray(['File', 'Table', 'C', 'R', 'U', 'D'], null, 'A1');
        $this->sheet->freezePane('A2');
    }

    /* 実行 */
    public function run(): void
    {
        // ① 対象ファイル列挙
        foreach ($this->scan($this->root) as $file) {
            // ② 定数取得（include 1 階層）
            $this->globalConst += $this->collectConst($file);

            // ③ 解析
            $this->analyze($file);
        }

        // ④ Excel へ書き込み
        $this->writeExcel();
        // 保存
        $out = __DIR__ . '/crud_one_sheet.xlsx';
        (new Xlsx($this->book))->save($out);
        echo "生成完了: " . realpath($out) . PHP_EOL;
    }

    /* --- フォルダ走査 ------ */
    private function scan(string $dir): array
    {
        $rii = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS)
        );
        $files = [];
        foreach ($rii as $f) {
            if ($f->isFile() && preg_match('/\.(php|inc)$/i', $f->getFilename())) {
                $files[] = $f->getRealPath();
            }
        }
        return $files;
    }

    /* --- 定数収集 (include 1 階層) ---- */
    private function collectConst(string $file): array
    {
        if ($this->visited[$file] ?? false) return [];
        $this->visited[$file] = true;

        $code = stripComments(file_get_contents($file));
        $const = collectDefines($code);

        foreach (collectIncludes($code, dirname($file)) as $inc) {
            $const += $this->collectConst($inc);
        }
        return $const;
    }

    /* --- ファイル単位解析 ---- */
    private function analyze(string $file): void
    {
        $code = stripComments(file_get_contents($file));
        $vars = collectLiteralVars($code);

        foreach (extractSqlExpr($code) as $expr) {
            $sql = evalConcat($expr, $this->globalConst, $vars);
            $sql = trim($sql);
            if ($sql === '') continue;

            try {
                $tree = (new PHPSQLParser($sql, true))->parsed;
                $crud = parseCrud($tree);

                // 結合
                foreach ($crud as $tbl => $ops) {
                    $ref =& $this->result[$file][$tbl];
                    $ref = array_merge($ref ?? ['C'=>false,'R'=>false,'U'=>false,'D'=>false], $ops);
                }
            } catch (Throwable $e) {
                // パース不可 -> 無視 or ログ
            }
        }
    }

    /* --- Excel 書込 ---- */
    private function writeExcel(): void
    {
        $row = 2;
        foreach ($this->result as $file => $tbls) {
            $rel = ltrim(str_replace($this->root, '', $file), DIRECTORY_SEPARATOR);
            foreach ($tbls as $tbl => $ops) {
                $this->sheet->setCellValue("A{$row}", $rel);
                $this->sheet->setCellValue("B{$row}", $tbl);
                $this->sheet->setCellValue("C{$row}", $ops['C'] ? '✓' : '');
                $this->sheet->setCellValue("D{$row}", $ops['R'] ? '✓' : '');
                $this->sheet->setCellValue("E{$row}", $ops['U'] ? '✓' : '');
                $this->sheet->setCellValue("F{$row}", $ops['D'] ? '✓' : '');
                $row++;
            }
            // ファイル間を 1 行空けると見やすい
            $row++;
        }
        // 列幅自動
        foreach (['A','B','C','D','E','F'] as $col) {
            $this->sheet->getColumnDimension($col)->setAutoSize(true);
        }
    }
}

/* --------------------------------------------------
 | 実行エントリ
 * -------------------------------------------------*/
if (php_sapi_name() !== 'cli') {
    fwrite(STDERR, "CLI で実行してください。\n");
    exit(1);
}

$target = $argv[1] ?? '';
if ($target === '' || !is_dir($target)) {
    fwrite(STDERR, "Usage: php crud_single_sheet.php <target_dir>\n");
    exit(1);
}

try {
    (new OneSheetCrudGenerator(realpath($target)))->run();
} catch (Throwable $e) {
    fwrite(STDERR, "Fatal: {$e->getMessage()}\n");
    exit(1);
}