#!/usr/bin/env php
<?php
/**
 * crud_one_sheet.php
 * ───────────────────────────────────────────
 *  - 定数 / 文字列リテラル変数を追跡（再代入対応）
 *  - $sql を式ごとに復元し、PHPSQLParser + 正規表現で CRUD 判定
 *  - 結果を 1 枚の Excel (File,Table,C,R,U,D) にまとめる
 *
 *  依存:
 *     composer require greenlion/php-sql-parser
 *     composer require phpoffice/phpspreadsheet
 *
 *  実行:
 *     php crud_one_sheet.php <target_dir>
 *
 *  © ChatGPT (o3) 2025-04-30
 */

declare(strict_types=1);

require_once __DIR__ . '/vendor/autoload.php';

use PHPSQLParser\PHPSQLParser;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Settings;

/* ───────────────────────────────────────────
 |  ユーティリティ
 * ──────────────────────────────────────────*/

/**
 * PHP / HTML コメント除去 & 改行を \n に統一
 */
function stripComments(string $code): string
{
    $patterns = [
        '/\/\*.*?\*\//s',            // /**…*/  /*…*/
        '/(?<!:)\/\/.*|#.*$/m',      // // …   # …
        '/<!--.*?-->/s',             // HTML <!-- … -->
    ];
    $code = preg_replace($patterns, ['', '', ''], $code) ?? $code;
    return str_replace(["\r\n", "\r"], "\n", $code);
}

/**
 * define('CONST','val') を収集
 *
 * @return array<string,string>
 */
function collectDefines(string $code): array
{
    preg_match_all(
        '/define\s*\(\s*[\'"](?<k>[A-Z0-9_]+)[\'"]\s*,\s*[\'"](?<v>[^\'"]+)[\'"]\s*\)/i',
        $code,
        $m,
        PREG_SET_ORDER
    );
    return array_column($m, 'v', 'k');
}

/**
 * include / require のファイルパスを 1 階層だけ抽出
 *
 * @param string $base 呼び出し元ファイルの dirname
 * @return string[]
 */
function collectIncludes(string $code, string $base): array
{
    preg_match_all(
        '/\b(include|require)(_once)?\s*\(\s*[\'"]([^\'"]+)[\'"]\s*\)/i',
        $code,
        $m
    );
    $files = [];
    foreach ($m[3] ?? [] as $path) {
        $abs = realpath($path) ?: realpath("$base/$path");
        if ($abs && is_file($abs)) $files[] = $abs;
    }
    return $files;
}

/**
 * $sql ステートメントを検出し、
 *  - 'expr' : 式文字列 (ドット連結等を保持)
 *  - 'vars' : その時点の変数スナップショット
 * を順番に yield
 *
 * @return \Generator<array{expr:string,vars:array<string,string>}>
 */
function extractSqlBlocks(string $code): \Generator
{
    $vars = [];   // 現在の変数マップ
    $cur  = '';   // 組み立て中の $sql 式

    foreach (explode("\n", $code) as $ln) {

        /* 1) 文字列リテラルの代入 ($table = 'users';) */
        if (preg_match(
                '/\$([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*[\'"]([^\'"]*)[\'"]\s*;/',
                $ln,
                $m
            )) {
            $vars[$m[1]] = $m[2];
            continue;
        }

        /* 2) $sql =  …  ← ステートメント開始 */
        if (preg_match('/\$(sql)\s*=\s*(?<e>.+?);/i', $ln, $m)) {
            if ($cur !== '') yield ['expr' => $cur, 'vars' => $vars];
            $cur = trim($m['e']);
            continue;
        }

        /* 3) $sql .= … ← 連結 */
        if (preg_match('/\$(sql)\s*\.\=\s*(?<e>.+?);/i', $ln, $m)) {
            $cur .= ' . ' . trim($m['e']);
            continue;
        }

        /* 4) それ以外の行：現在のステートメントが確定していれば flush */
        if ($cur !== '' && !preg_match('/\.\=/', $ln)) {
            yield ['expr' => $cur, 'vars' => $vars];
            $cur = '';
        }
    }

    if ($cur !== '') {
        yield ['expr' => $cur, 'vars' => $vars];   // ファイル末尾
    }
}

/**
 * ドット演算・sprintf などを静的に評価し、最終 SQL 文字列を返す
 */
function evalConcat(string $expr, array $const, array $vars): string
{
    // sprintf("SELECT %s", $table)
    if (preg_match('/sprintf\s*\(\s*([\'"])(?<fmt>.+?)\1\s*,\s*(?<args>.+)\)$/i', $expr, $m)) {
        $fmt  = $m['fmt'];
        $args = array_map(
            fn($a) => evalConcat(trim($a), $const, $vars),
            preg_split('/\s*,\s*/', $m['args'])
        );
        return @vsprintf($fmt, $args) ?: '';
    }

    $out = '';
    foreach (preg_split('/\s*\.\s*/', $expr) as $part) {
        $p = trim($part);
        if ($p === '') continue;

        // 文字列リテラル
        if ($p[0] === '"' || $p[0] === "'") {
            $str = stripslashes(substr($p, 1, -1));
            if ($p[0] === '"') {
                $str = preg_replace_callback('/\$([a-zA-Z_][a-zA-Z0-9_]*)/', fn($m)
                    => $vars[$m[1]] ?? $m[0], $str);
            }
            $out .= $str;
            continue;
        }

        // 変数
        if ($p[0] === '$') {
            $key = substr($p, 1);
            $out .= $vars[$key] ?? $p;
            continue;
        }

        // 定数
        if (isset($const[$p])) {
            $out .= $const[$p];
            continue;
        }

        $out .= $p;   // その他
    }

    return $out;
}

/**
 * PHPSQLParser ツリー + 生 SQL を CRUD マップに変換
 *
 * @return array<string,array{C:bool,R:bool,U:bool,D:bool}>
 */
function parseCrud(array $tree, string $sql): array
{
    $crud = [];

    /* --- 基本 4 文 ------------------------------------------------ */
    if ($tree['INSERT'] ?? false) {
        $t = $tree['INSERT'][0]['no_quotes']['parts'][0] ?? '';
        $crud[$t]['C'] = true;
    }
    if ($tree['UPDATE'] ?? false) {
        $t = $tree['UPDATE'][0]['table'] ?? '';
        $crud[$t]['U'] = true;
    }
    if ($tree['DELETE'] ?? false) {
        $target = $tree['FROM'][0]['table'] ?? '';
        $crud[$target]['D'] = true;
    }
    if ($tree['SELECT'] ?? false) {
        // FROM → R
        foreach ($tree['FROM'] ?? [] as $f) {
            $crud[$f['table'] ?? '']['R'] = true;
        }
        // INTO TEMP → C
        if ($tree['INTO'] ?? false) {
            foreach ($tree['INTO'] as $into) {
                $t = $into['table'] ?? '';
                if ($t) {
                    $t = preg_match('/\btemp\b/i', $into['base_expr']) ? "{$t}@temp" : $t;
                    $crud[$t]['C'] = true;
                }
            }
        }
    }

    /* --- JOIN は一律 R -------------------------------------------- */
    foreach ($tree['FROM'] ?? [] as $f) {
        if (($f['join_type'] ?? '') !== '') {
            $crud[$f['table'] ?? '']['R'] = true;
        }
    }

    /* --- UPDATE / DELETE + FROM 参照 → R --------------------------- */
    if ($tree['UPDATE'] ?? false || $tree['DELETE'] ?? false) {
        // 先頭 FROM はすでに U/D でセット済みなので 2 つ目以降を R
        foreach (array_slice($tree['FROM'] ?? [], 1) as $f) {
            $crud[$f['table'] ?? '']['R'] = true;
        }
    }

    /* --- CREATE TEMP TABLE → C ------------------------------------ */
    if ($tree['CREATE TABLE'] ?? false) {
        $t = $tree['TABLE']['no_quotes']['parts'][0] ?? '';
        if ($t) {
            $t = preg_match('/\btemp/i', $sql) ? "{$t}@temp" : $t;
            $crud[$t]['C'] = true;
        }
    }

    /* --- DROP / TRUNCATE → D -------------------------------------- */
    if (preg_match('/^\s*DROP\s+TABLE\s+([a-zA-Z0-9_.]+)/i', $sql, $m)
        || preg_match('/^\s*TRUNCATE\s+TABLE\s+([a-zA-Z0-9_.]+)/i', $sql, $m)) {
        $crud[$m[1]]['D'] = true;
    }

    /* --- WITH 句 (CTE) → temp C ----------------------------------- */
    if (preg_match_all('/WITH\s+([a-zA-Z0-9_]+)\s+AS\s*\(/i', $sql, $w)) {
        foreach ($w[1] as $cte) {
            $crud["{$cte}@temp"]['C'] = true;
        }
    }

    /* --- 正規化 ---------------------------------------------------- */
    foreach ($crud as $tbl => $ops) {
        $crud[$tbl] = array_merge(['C'=>false,'R'=>false,'U'=>false,'D'=>false], $ops);
    }
    return $crud;
}

/* ───────────────────────────────────────────
 |  メインクラス
 * ──────────────────────────────────────────*/
class CrudOneSheet
{
    private Spreadsheet $book;
    private \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet;

    /** 定数キャッシュ */
    private array $globalConst = [];
    /** include 追跡 */
    private array $visited = [];
    /** 結果テーブル */
    private array $result = [];

    public function __construct(private string $root)
    {
        Settings::setCache(Settings::CACHE_MEMORY_GZIP);

        $this->book  = new Spreadsheet();
        $this->sheet = $this->book->getActiveSheet();
        $this->sheet->setTitle('CRUD');

        // ヘッダ行
        $this->sheet->fromArray(['File', 'Table', 'C', 'R', 'U', 'D'], null, 'A1');
        $this->sheet->freezePane('A2');
    }

    public function run(): void
    {
        foreach ($this->scan($this->root) as $file) {
            $this->globalConst += $this->collectConst($file);
            $this->analyze($file);
        }
        $this->writeExcel();
        (new Xlsx($this->book))->save(__DIR__ . '/crud_one_sheet.xlsx');
        echo "生成完了: " . realpath(__DIR__ . '/crud_one_sheet.xlsx') . PHP_EOL;
    }

    /* ---- ディレクトリ再帰 ---- */
    private function scan(string $dir): array
    {
        $rii = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS)
        );
        $out = [];
        foreach ($rii as $f) {
            if ($f->isFile() && preg_match('/\.(php|inc)$/i', $f->getFilename())) {
                $out[] = $f->getRealPath();
            }
        }
        return $out;
    }

    /* ---- 定数収集（include 1 階層） ---- */
    private function collectConst(string $file): array
    {
        if ($this->visited[$file] ?? false) return [];
        $this->visited[$file] = true;

        $code = stripComments(file_get_contents($file));
        $defs = collectDefines($code);

        foreach (collectIncludes($code, dirname($file)) as $inc) {
            $defs += $this->collectConst($inc);
        }
        return $defs;
    }

    /* ---- ファイル解析 ---- */
    private function analyze(string $file): void
    {
        $code = stripComments(file_get_contents($file));

        foreach (extractSqlBlocks($code) as ['expr' => $expr, 'vars' => $varsNow]) {

            $sql = evalConcat($expr, $this->globalConst, $varsNow);
            $sql = trim($sql);
            if ($sql === '') continue;

            try {
                $tree = (new PHPSQLParser($sql, true))->parsed;
                $crud = parseCrud($tree, $sql);

                foreach ($crud as $tbl => $ops) {
                    $this->result[$file][$tbl] = array_merge(
                        $this->result[$file][$tbl] ?? ['C'=>false,'R'=>false,'U'=>false,'D'=>false],
                        $ops
                    );
                }
            } catch (\Throwable $e) {
                // パース失敗は無視またはログ
            }
        }
    }

    /* ---- Excel 書き込み ---- */
    private function writeExcel(): void
    {
        $row = 2;
        foreach ($this->result as $file => $tables) {
            $rel = ltrim(str_replace($this->root, '', $file), DIRECTORY_SEPARATOR);
            foreach ($tables as $tbl => $ops) {
                $this->sheet->setCellValue("A{$row}", $rel);
                $this->sheet->setCellValue("B{$row}", $tbl);
                $this->sheet->setCellValue("C{$row}", $ops['C'] ? '✓' : '');
                $this->sheet->setCellValue("D{$row}", $ops['R'] ? '✓' : '');
                $this->sheet->setCellValue("E{$row}", $ops['U'] ? '✓' : '');
                $this->sheet->setCellValue("F{$row}", $ops['D'] ? '✓' : '');
                $row++;
            }
            $row++; // ファイル間を 1 行空ける
        }
        foreach (['A','B','C','D','E','F'] as $col) {
            $this->sheet->getColumnDimension($col)->setAutoSize(true);
        }
    }
}

/* ───────────────────────────────────────────
 |  実行エントリ
 * ──────────────────────────────────────────*/
if (php_sapi_name() !== 'cli') {
    fwrite(STDERR, "CLI で実行してください。\n");
    exit(1);
}

$target = $argv[1] ?? '';
if ($target === '' || !is_dir($target)) {
    fwrite(STDERR, "Usage: php crud_one_sheet.php <target_dir>\n");
    exit(1);
}

try {
    (new CrudOneSheet(realpath($target)))->run();
} catch (\Throwable $e) {
    fwrite(STDERR, "Fatal: {$e->getMessage()}\n");
    exit(1);
}