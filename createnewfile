#!/usr/bin/env php
<?php
declare(strict_types=1);

/* ───────────── CLI 入口 ───────────── */

$argv = $_SERVER['argv'];
array_shift($argv);

if (empty($argv) || in_array($argv[0], ['-h', '--help'], true)) {
    fwrite(STDERR, <<<HELP
    usage: php cleanup.php <file|directory>

      整形後のファイルはカレントディレクトリの edited/ 以下に出力されます。
      実行前に edited/ の中身はすべて削除されます。

    HELP);
    exit($argv ? 0 : 1);
}

$targetPath = realpath($argv[0]);
if ($targetPath === false) {
    fwrite(STDERR, "Error: path not found.\n");
    exit(1);
}

/* ───────────── 出力フォルダ準備 ───────────── */

$cwd        = getcwd();
$editedRoot = $cwd . DIRECTORY_SEPARATOR . 'edited';
prepareEditedDir($editedRoot);    // ← ここで再帰削除＋mkdir

/* ───────────── ファイル収集 ───────────── */

$files = collectPhpFiles($targetPath);
if (!$files) {
    fwrite(STDERR, "No PHP/INC files found.\n");
    exit(0);
}

$basePath = is_file($targetPath)
    ? dirname($targetPath)
    : rtrim($targetPath, DIRECTORY_SEPARATOR);

/* ───────────── 変換＆書き出し ───────────── */

foreach ($files as $file) {
    $source = toUtf8(file_get_contents($file));

    $userConsts = collectUserDefinedConstants($source);
    $defined    = array_merge(
        array_keys(get_defined_constants(true)['Core'] ?? get_defined_constants()),
        $userConsts
    );

    $clean = transformSource($source, $defined);

    $relative = ltrim(substr($file, strlen($basePath)), DIRECTORY_SEPARATOR);
    $destPath = $editedRoot . DIRECTORY_SEPARATOR . $relative;

    $dir = dirname($destPath);
    if (!is_dir($dir) && !mkdir($dir, 0777, true) && !is_dir($dir)) {
        fwrite(STDERR, "Error: mkdir failed: {$dir}\n");
        continue;
    }

    file_put_contents($destPath, $clean);
    echo "[OK]  {$destPath}\n";
}

/* ───────────── 関数定義群 ───────────── */

/**
 * edited/ ディレクトリを再作成
 *  - 既に存在する場合は中身を再帰削除
 *  - 不存在なら mkdir
 */
function prepareEditedDir(string $dir): void
{
    if (is_dir($dir)) {
        $iter = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator(
                $dir,
                FilesystemIterator::SKIP_DOTS | FilesystemIterator::CURRENT_AS_PATHNAME
            ),
            RecursiveIteratorIterator::CHILD_FIRST
        );
        foreach ($iter as $path) {
            is_dir($path) ? rmdir($path) : unlink($path);
        }
    }
    if (!is_dir($dir) && !mkdir($dir, 0777, true) && !is_dir($dir)) {
        fwrite(STDERR, "Error: cannot recreate 'edited' directory.\n");
        exit(1);
    }
}

/**
 * 再帰的に *.php / *.inc ファイルを収集
 * @return string[]
 */
function collectPhpFiles(string $path): array
{
    if (is_file($path)) {
        return preg_match('/\.(php|inc)$/i', $path) ? [$path] : [];
    }

    $iter = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator(
            $path,
            FilesystemIterator::SKIP_DOTS | FilesystemIterator::FOLLOW_SYMLINKS
        )
    );

    $files = [];
    foreach ($iter as $info) {
        /** @var SplFileInfo $info */
        if ($info->isFile() && preg_match('/\.(php|inc)$/i', $info->getFilename())) {
            $files[] = $info->getRealPath();
        }
    }
    return $files;
}

/* …(collectUserDefinedConstants, transformSource, quoteArrayKeys, rebuildSource, toUtf8 は前回と同じなので省略)… */

/* === 省略部分は “前回回答の内容” と同一 === */