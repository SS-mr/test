#!/usr/bin/env php
<?php
/**
 * CRUD Analyzer v3.4-fix  – 2025-05-21
 * usage: php crudAnalyzer.php <TARGET_DIR>
 *
 * 依存:
 *   composer require nikic/php-parser:^5
 *   composer require phpoffice/phpspreadsheet
 */

declare(strict_types=1);
require_once __DIR__ . '/vendor/autoload.php';

use PhpParser\{
    Lexer,
    ParserFactory,
    Node,
    NodeTraverser,
    NodeVisitorAbstract
};
use PhpParser\Node\Expr\{
    Assign,
    AssignOp\Concat as AssignConcat,
    BinaryOp\Concat,
    Encapsed,
    Variable,
    ConstFetch,
    FuncCall,
    MethodCall,
    StaticCall,
    Closure
};
use PhpParser\Node\Scalar\String_;
use PhpParser\Node\Stmt\{
    Const_     as StmtConst,
    Function_  as StmtFunc,
    Class_     as StmtClass,
    ClassMethod
};
use PhpParser\Node\Const_   as NodeConst;
use PhpOffice\PhpSpreadsheet\{
    Spreadsheet,
    Writer\Xlsx
};

/* ---------- 設定 ---------- */
const EXT = '/\.(php|inc|html?|js)$/i';
const SQL_HEAD = '(SELECT|INSERT|UPDATE|DELETE|MERGE|CREATE|DROP|TRUNCATE|WITH)';
date_default_timezone_set('Asia/Tokyo');

/* ---------- 引数 ---------- */
$root = $argv[1] ?? '';
if (!$root || !is_dir($root = realpath($root))) {
    fwrite(STDERR, "Usage: php crudAnalyzer.php <DIR>\n");
    exit(1);
}

/* ---------- ビュー一覧 ---------- */
$views = is_file($vf = __DIR__ . '/input/views.txt')
       ? array_map('strtolower', array_map('trim', file($vf)))
       : [];

/* ---------- ファイル数 ---------- */
$total = iterator_count(
    new RegexIterator(
        new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($root, FilesystemIterator::SKIP_DOTS)
        ),
        EXT
));
if (!$total) { echo "対象ファイルが見つかりません\n"; exit; }
$done = 0; $start = microtime(true); $last = $start;

/* ---------- CRUD 結果 ---------- */
$crud = [];
$addCrud = function (string $file, string $func, string $tbl, array $ops, bool $isView, bool $isTemp) use (&$crud) {
    $note = [];
    if ($isView) $note[] = '@view';
    if ($isTemp) $note[] = '@temp';
    $key = "$file|$func|$tbl|" . implode(',', $note);
    $crud[$key] = $crud[$key] ?? [
        'file'=>$file,'func'=>$func,'table'=>$tbl,'note'=>implode(',',$note),
        'C'=>false,'R'=>false,'U'=>false,'D'=>false
    ];
    foreach (['C','R','U','D'] as $c)
        if (!empty($ops[$c])) $crud[$key][$c] = true;
};

/* ---------- PhpParser 準備 ---------- */
$lexer  = new Lexer(['usedAttributes'=>['startFilePos','endFilePos']]);
$parser = (new ParserFactory())->createForNewestSupportedVersion($lexer);

/* ---------- 走査 ---------- */
$iter = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($root, FilesystemIterator::SKIP_DOTS));
foreach ($iter as $fi) {
    if (!$fi->isFile() || !preg_match(EXT, $fi->getFilename())) continue;

    $rel = substr($fi->getPathname(), strlen($root) + 1);
    $src = file_get_contents($fi->getPathname());
    if ($src === false) continue;

    try { $ast = $parser->parse($src) ?? []; }
    catch (Throwable) { $ast = []; }

    $trav = new NodeTraverser();
    $trav->addVisitor(new class ($rel, $src, $addCrud, $views) extends NodeVisitorAbstract {

        /* ---- ctor ---- */
        function __construct(
            private string $file,
            private string $src,
            private $add,
            private array  $views
        ) {}

        /* ---- 状態 ---- */
        private array $const = [];
        private array $vars  = [];
        private array $classStack = [];
        private string $func = 'main';
        private array $pending = [];
        private array $scopeRanges = [];

        /* ---------- enter ---------- */
        public function enterNode(Node $n) {

            /* スコープ push */
            if ($n instanceof StmtClass)
                $this->classStack[] = $n->name ? $n->name->toString() : 'anonymousClass';
            if ($n instanceof StmtFunc)        { $this->vars=[]; $this->func=$n->name->toString(); }
            elseif ($n instanceof ClassMethod) { $this->vars=[];
                $cls=end($this->classStack)?:'anonymousClass';
                $this->func=$cls.'::'.$n->name->toString();
            }
            elseif ($n instanceof Closure)     { $this->vars=[]; $this->func='Closure@'.$n->getStartLine(); }

            /* 定数定義 */
            if ($n instanceof FuncCall
                && $n->name instanceof PhpParser\Node\Name
                && strtolower($n->name->toString())==='define'
                && isset($n->args[0],$n->args[1])) {
                $c=$this->eval($n->args[0]->value); $v=$this->eval($n->args[1]->value);
                if(is_string($c)&&is_string($v)) $this->const[$c]=$v;
            }
            if ($n instanceof StmtConst) {
                foreach ($n->consts as $c) {
                    $v=$this->eval($c->value);
                    if(is_string($v)) $this->const[$c->name->toString()]=$v;
                }
            }

            /* 変数 */
            if ($n instanceof Assign && $this->isVar($n->var))
                $this->vars[$n->var->name] = $this->eval($n->expr);
            if ($n instanceof AssignConcat && $this->isVar($n->var)) {
                $l=$this->vars[$n->var->name]??''; $r=$this->eval($n->expr)??'';
                $this->vars[$n->var->name] = $l . $r;
            }

            /* SQL ノード候補 */
            if ($n instanceof FuncCall||$n instanceof MethodCall||$n instanceof StaticCall)
                if(isset($n->args[0])) $this->maybe($n->args[0]->value);
            if ($n instanceof String_||$n instanceof Encapsed) $this->maybe($n);
        }

        /* ---------- leave ---------- */
        public function leaveNode(Node $n) {
            if ($n instanceof StmtFunc || $n instanceof ClassMethod || $n instanceof Closure) {
                $this->flush();
                $this->scanBlock($n);
                $this->vars=[]; $this->func='main';
            }
            if ($n instanceof StmtClass) array_pop($this->classStack);
        }

        public function afterTraverse(array $nodes) {
            $this->flush();
            $main=$this->src;
            foreach($this->scopeRanges as [$s,$e])
                $main=substr_replace($main,str_repeat(' ',$e-$s+1),$s,$e-$s+1);
            $this->scanRaw($main);          // main 部検索
        }

        /* ---------- helpers ---------- */
        private function isVar($v):bool { return $v instanceof Variable && is_string($v->name); }

        private function maybe(Node $expr):void {
            $s=$this->eval($expr);
            if($s!==null && preg_match('/^\s*'.SQL_HEAD.'/i',$s)) $this->pending[]=$expr;
        }

        private function flush():void {
            foreach($this->pending as $n)
                if(($s=$this->eval($n))!==null) $this->analyze($s);
            $this->pending=[];
        }

        private function scanBlock(Node $n):void {
            $s=$n->getStartFilePos(); $e=$n->getEndFilePos();
            if($s===null||$e===null) return;
            $this->scopeRanges[] = [$s,$e];
            $this->scanRaw(substr($this->src,$s,$e-$s+1));
        }

        private function scanRaw(string $txt):void {
            if(preg_match_all('/[\'"]\s*'.SQL_HEAD.'\b.*?[\'"]/is',$txt,$m))
                foreach(array_unique($m[0]) as $raw)
                    $this->analyze(trim($raw,"\"' "));
        }

        private function eval($e,int $d=0):?string {
            if($d>256) return null;
            return match(true){
                $e instanceof String_ => $e->value,
                $e instanceof Variable && is_string($e->name)
                                         => $this->vars[$e->name]??null,
                $e instanceof ConstFetch
                                         => $this->const[$e->name->toString()]
                                            ??(defined($e->name->toString())?constant($e->name->toString()):null),
                $e instanceof Encapsed => array_reduce($e->parts,
                                         fn($c,$p)=>$c.($this->eval($p,$d+1)??''),''),
                $e instanceof BinaryOp\Concat
                                         => ($this->eval($e->left,$d+1)??'')
                                            .($this->eval($e->right,$d+1)??''),
                default => null,
            };
        }

        private function strip(string $t):string {
            if(stripos($t,' as ')!==false) $t=preg_split('/\s+as\s+/i',$t)[0];
            return rtrim(preg_split('/\s+/',$t)[0],',');
        }

        private function analyze(string $sql):void {
            $tbls=[];
            /* R */
            if(preg_match_all('/\bFROM\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)/i',$sql,$m))
                foreach($m[1] as $t)$tbls[$this->strip($t)]['R']=true;
            if(preg_match_all('/\bJOIN\s+([A-Za-z0-9_\.`"\[\]]+)/i',$sql,$m))
                foreach($m[1] as $t)$tbls[$this->strip($t)]['R']=true;
            if(preg_match_all('/\(\s*SELECT .*? FROM\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)/is',$sql,$m))
                foreach($m[1] as $t)$tbls[$this->strip($t)]['R']=true;
            /* C/U/D */
            if(preg_match('/\bINSERT\s+INTO\s+([A-Za-z0-9_\.`"\[\]]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])]['C']=true;
            if(preg_match('/\bUPDATE\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])]['U']=true;
            if(preg_match('/\bDELETE\s+FROM\s+([A-Za-z0-9_\.`"\[\]]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])]['D']=true;
            if(preg_match('/\bMERGE\s+INTO\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])] += ['C'=>true,'U'=>true];
            if(preg_match('/\b(?:DROP|TRUNCATE)\s+TABLE\s+([A-Za-z0-9_\.`"\[\]]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])]['D']=true;
            /* TEMP / CTE */
            if(preg_match('/\bCREATE\s+TEMP\s+TABLE\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)/i',$sql,$m))
                $tbls[$this->strip($m[1])] += ['C'=>true,'temp'=>true];
            if(preg_match('/\bSELECT .*? INTO\s+TEMP\s+([A-Za-z0-9_\.`"\[\]]+)/is',$sql,$m))
                $tbls[$this->strip($m[1])] += ['C'=>true,'temp'=>true];
            if(preg_match_all('/\bWITH\s+([A-Za-z0-9_\.`"$begin:math:display$$end:math:display$]+)\s+AS\s*\(/i',$sql,$m))
                foreach($m[1] as $cte)$tbls[$this->strip($cte)]+=['C'=>true,'R'=>true,'temp'=>true];

            foreach($tbls as $tbl=>$ops){
                ($this->add)(
                    $this->file,$this->func,$tbl,$ops,
                    in_array(strtolower($tbl),$this->views),
                    !empty($ops['temp'])
                );
            }
        }
    });

    $trav->traverse($ast);

    /* progress */
    $done++; $now=microtime(true);
    if($now-$last>($total>300?1:0.5) || $done===$total){
        $pct=$done/$total*100;
        $eta=$done?($now-$start)/$done*($total-$done):0;
        printf("\r[%6.2f%%] %d/%d | %ds | ETA %ds",
            $pct,$done,$total,(int)($now-$start),(int)$eta);
        $last=$now;
    }
}
echo PHP_EOL;

/* ---------- Excel ---------- */
$ss=new Spreadsheet();
$sh=$ss->getActiveSheet()->setTitle('CRUD図');
$head=['A'=>'ファイル','B'=>'関数','C'=>'テーブル','D'=>'注釈','E'=>'C','F'=>'R','G'=>'U','H'=>'D'];
foreach($head as $c=>$t)$sh->setCellValue("$c1",$t);

$row=2; ksort($crud);
foreach($crud as $r){
    $sh->fromArray([
        $r['file'],$r['func'],$r['table'],$r['note'],
        $r['C']?'✓':'',$r['R']?'✓':'',$r['U']?'✓':'',$r['D']?'✓':''
    ],null,"A{$row}");
    $row++;
}
foreach(range('A','H') as $c) $sh->getColumnDimension($c)->setAutoSize(true);
if(!is_dir('output')) mkdir('output',0777,true);
(new Xlsx($ss))->save('output/crud_analysis.xlsx');
echo "解析完了 → output/crud_analysis.xlsx\n";