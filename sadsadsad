#!/usr/bin/env php
<?php
/**
 * include_scanner.php  – regex-only, low-memory, progress view
 * -----------------------------------------------------------------
 * 対象拡張子: php / inc / html / js
 * 解析方法  : 正規表現のみ。token_get_all は不使用
 * 進捗表示  : 総ファイル数をカウントして N/total & % を随時表示
 * メモリ    : レコードを配列に保持せず、1 ファイル処理ごとに
 *             直接 Spreadsheet へ追記して解放
 * -----------------------------------------------------------------
 * CLI:
 *   php include_scanner.php <DIR> [<OUTFILE>] [--progress-step=50]
 *
 * 依存:
 *   composer require phpoffice/phpspreadsheet
 * -----------------------------------------------------------------
 */

declare(strict_types=1);
require_once __DIR__ . '/vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

/* ================================================================
 * 0. 定数・ユーティリティ
 * ============================================================== */
const TARGET_EXTS = ['php', 'inc', 'html', 'js'];

/** 相対パス化 */
function relPath(string $file, string $base): string
{
    $base  = realpath($base) ?: $base;
    $file  = realpath($file) ?: $file;
    return ltrim(str_replace($base, '', $file), DIRECTORY_SEPARATOR);
}

/** コメント除去（文字列リテラルは保持）*/
function stripComments(string $code): string
{
    /* ---------- 1) /* … */ ---------- */
    $code = preg_replace('#/\*.*?\*/#s', '', $code);
    /* ---------- 2) // と # ---------- */
    $code = preg_replace('#(^|\h)//.*$#m', '$1', $code);
    $code = preg_replace('#(^|\h)#.*$#m', '$1', $code);
    return $code;
}

/** PHP コード片から include/require を抽出（正規表現のみ） */
function extractIncludes(string $php): array
{
    $php  = stripComments($php);

    $re =
        '/\b(include(?:_once)?|require(?:_once)?)' .  // 1: type
        '\s*' .
        '(?:\(\s*([^;]+?)\s*\)|\s*([^;]+?))' .        // 2 or 3: expr
        '\s*;/i';
    preg_match_all($re, $php, $m, PREG_SET_ORDER);

    $res = [];
    foreach ($m as $hit) {
        $expr = trim($hit[2] !== '' ? $hit[2] : $hit[3]);
        $res[] = [
            'type'   => strtolower($hit[1]),
            'target' => $expr,
        ];
    }
    return $res;
}

/** HTML/JS の中の php ブロックを取得 */
function extractPhpBlocks(string $code): array
{
    $blocks = [];
    if (preg_match_all('/<\?(?:php)?(.*?)\?>/is', $code, $m)) {
        $blocks = $m[1];
    }
    return $blocks;
}

/* ================================================================
 * 1. 引数処理
 * ============================================================== */
$baseDir = $argv[1] ?? null;
if (!$baseDir) {
    fwrite(STDERR, "Usage: php include_scanner.php <DIR> [<OUTFILE>] [--progress-step=N]\n");
    exit(1);
}
$baseDir = realpath($baseDir);
if ($baseDir === false || !is_dir($baseDir)) {
    fwrite(STDERR, "Error: '{$argv[1]}' is not a directory.\n");
    exit(1);
}
$outFile = $argv[2] ?? 'includes.xlsx';

/* 進捗表示間隔 */
$progressStep = 50;   // default
foreach ($argv as $arg) {
    if (preg_match('/^--progress-step=(\d+)$/', $arg, $m)) {
        $progressStep = max(1, (int)$m[1]);
    }
}

/* ================================================================
 * 2. 対象ファイル総数を先にカウント（進捗用）
 * ============================================================== */
$rii = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator(
        $baseDir,
        FilesystemIterator::SKIP_DOTS | FilesystemIterator::FOLLOW_SYMLINKS
    )
);
$totalFiles = 0;
foreach ($rii as $f) {
    if ($f->isFile() && in_array(strtolower($f->getExtension()), TARGET_EXTS, true)) {
        $totalFiles++;
    }
}
if ($totalFiles === 0) {
    fwrite(STDERR, "No target files found.\n");
    exit(1);
}

/* ================================================================
 * 3. Spreadsheet 準備（レコード保持せず直接追記）
 * ============================================================== */
$spreadsheet = new Spreadsheet();
$sheet       = $spreadsheet->getActiveSheet()->setTitle('Includes');
$sheet->fromArray(['ファイル名', 'インクルードタイプ', 'インクルードファイル'], null, 'A1');
$sheet->getStyle('A1:C1')->getFont()->setBold(true);
$currentRow  = 2;

/* ================================================================
 * 4. メイン走査
 * ============================================================== */
$processed = 0;
$rii->rewind();   // ← iterator を再利用
foreach ($rii as $fileInfo) {
    if (!$fileInfo->isFile()) continue;
    $ext = strtolower($fileInfo->getExtension());
    if (!in_array($ext, TARGET_EXTS, true)) continue;

    $processed++;
    /* ------- 進捗表示 ------- */
    if ($processed === 1 || $processed % $progressStep === 0 || $processed === $totalFiles) {
        $pct = number_format($processed / $totalFiles * 100, 1);
        echo "[{$processed}/{$totalFiles}] {$pct}%  {$fileInfo->getFilename()}\n";
    }

    /* ------- ファイル読み込み ------- */
    $code = file_get_contents($fileInfo->getPathname());
    if ($code === false) continue;

    /* ------- PHP コード抽出 ------- */
    $phpSegments = [];
    if (in_array($ext, ['html', 'js'], true)) {
        $phpSegments = extractPhpBlocks($code);
    } else {                              // php / inc
        $phpSegments = [$code];
    }

    $unique = [];
    foreach ($phpSegments as $seg) {
        foreach (extractIncludes($seg) as $inc) {
            $key = $inc['type'] . '|' . $inc['target'];
            if (isset($unique[$key])) continue;   // 同一ファイル内重複排除
            $unique[$key] = true;

            /* Excel へ直接書き込み */
            $sheet->setCellValue("A{$currentRow}", relPath($fileInfo->getPathname(), $baseDir));
            $sheet->setCellValue("B{$currentRow}", $inc['type']);
            $sheet->setCellValue("C{$currentRow}", $inc['target']);
            $currentRow++;
        }
    }
}

/* 列幅自動調整 */
foreach (range('A', 'C') as $col) {
    $sheet->getColumnDimension($col)->setAutoSize(true);
}

/* ================================================================
 * 5. 保存 & 終了
 * ============================================================== */
(new Xlsx($spreadsheet))->save($outFile);
echo "Done.  Total rows written: " . ($currentRow - 2) . "\n";