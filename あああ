function fallbackParse($code, $rel_path) {
    global $crud_data, $log_data, $defines;

    $view_list = file_exists("view_list.txt") ? file("view_list.txt", FILE_IGNORE_NEW_LINES) : [];
    $proc_list = file_exists("procedure_list.txt") ? file("procedure_list.txt", FILE_IGNORE_NEW_LINES) : [];

    $lines = explode("\n", $code);
    $sql_vars = [];
    $vars = [];

    $full_sql_candidates = [];

    foreach ($lines as $line) {
        // 定数 define("TBL", "orders")
        if (preg_match('/define\s*\(\s*[\'"](\w+)[\'"]\s*,\s*[\'"](\w+)[\'"]\s*\)/i', $line, $m)) {
            $defines[$m[1]] = $m[2];
        }

        // 単純変数代入 $table = 'orders';
        if (preg_match('/\$(\w+)\s*=\s*[\'"]([\w@]+)[\'"]\s*;/', $line, $m)) {
            $vars[$m[1]] = $m[2];
        }

        // SQL組み立て（.=, =）$sql .= "...";
        if (preg_match('/\$(\w+)\s*(=|\.=)\s*["\'](.*?)["\']\s*;/', $line, $m)) {
            $var = $m[1];
            $op = $m[2];
            $val = $m[3];

            // 定数・変数展開
            $val = preg_replace_callback('/\b([A-Z_][A-Z0-9_]*)\b/', fn($matches) => $defines[$matches[1]] ?? $matches[1], $val);
            $val = preg_replace_callback('/\$(\w+)/', fn($matches) => $vars[$matches[1]] ?? $matches[0], $val);

            if (!isset($sql_vars[$var])) $sql_vars[$var] = '';
            $sql_vars[$var] = ($op === '=') ? $val : $sql_vars[$var] . ' ' . $val;
        }

        // 生SQLっぽい文字列を拾う
        if (preg_match('/(select|insert|update|delete|create\s+temp)\s+.+/i', $line)) {
            $clean = cleanSQL($line);
            $full_sql_candidates[] = $clean;
        }
    }

    // 通常のSQL変数展開も処理
    foreach ($sql_vars as $sql) {
        $full_sql_candidates[] = cleanSQL($sql);
    }

    // 重複除去して処理
    foreach (array_unique($full_sql_candidates) as $sql) {
        if (empty($sql)) continue;

        try {
            $parser = new PHPSQLParser($sql, true);

            $op = '';
            if (isset($parser->parsed['SELECT'])) $op = 'R';
            if (isset($parser->parsed['INSERT'])) $op = 'C';
            if (isset($parser->parsed['UPDATE'])) $op = 'U';
            if (isset($parser->parsed['DELETE'])) $op = 'D';
            if (isset($parser->parsed['CREATE']) && stripos($sql, 'temp') !== false) $op = 'C@temp';

            foreach (['FROM', 'JOIN', 'UPDATE', 'INTO', 'TABLE'] as $clause) {
                if (!isset($parser->parsed[$clause])) continue;

                foreach ($parser->parsed[$clause] as $entry) {
                    if ($clause === 'FROM' && isset($entry['sub_tree'])) continue;
                    if (!isset($entry['no_quotes']['parts'][0])) continue;

                    $tname = $entry['no_quotes']['parts'][0];
                    if (in_array($tname, $view_list)) {
                        $tname .= '@view';
                    } elseif (in_array($tname, $proc_list)) {
                        $tname .= '@proc';
                    } elseif (strpos($op, '@temp') !== false) {
                        $tname .= '@temp';
                    }

                    $key = "$rel_path|$tname";
                    $entry_ref = &$crud_data[$key];
                    $entry_ref['file'] = $rel_path;
                    $entry_ref['table'] = $tname;
                    $entry_ref['C'] = ($op === 'C' || $op === 'C@temp') ? '○' : ($entry_ref['C'] ?? '');
                    $entry_ref['R'] = $op === 'R' ? '○' : ($entry_ref['R'] ?? '');
                    $entry_ref['U'] = $op === 'U' ? '○' : ($entry_ref['U'] ?? '');
                    $entry_ref['D'] = $op === 'D' ? '○' : ($entry_ref['D'] ?? '');
                }
            }
        } catch (Exception $e) {
            $log_data[] = ['file' => $rel_path, 'message' => "fallback SQL解析失敗: " . $e->getMessage()];
        }
    }
}