function fallbackParse($code, $rel_path) {
    global $crud_data, $log_data, $defines;

    $view_list = file_exists("view_list.txt") ? file("view_list.txt", FILE_IGNORE_NEW_LINES) : [];
    $proc_list = file_exists("procedure_list.txt") ? file("procedure_list.txt", FILE_IGNORE_NEW_LINES) : [];

    // 初期スキャン：定数・変数定義（単純代入のみ）
    $vars = [];
    $lines = explode("\n", $code);
    foreach ($lines as $line) {
        if (preg_match('/define\s*\(\s*[\'"](\w+)[\'"]\s*,\s*[\'"](\w+)[\'"]\s*\)/i', $line, $m)) {
            $defines[$m[1]] = $m[2];
        }
        if (preg_match('/\$(\w+)\s*=\s*[\'"]([\w@]+)[\'"]\s*;/', $line, $m)) {
            $vars[$m[1]] = $m[2];
        }
    }

    // すべてのSQL構築文を統一的に抽出（複数行でも順序保証）
    $sql_vars = [];
    $clean_code = preg_replace('#//.*?$|/\*.*?\*/#ms', '', $code);
    preg_match_all('/\$(\w+)\s*(=|\.=)\s*([\'"])(.*?)\3\s*;?/', $clean_code, $matches, PREG_SET_ORDER);
    foreach ($matches as $m) {
        $var = $m[1];
        $op = $m[2];
        $val = $m[4];

        // 定数・変数展開
        $val = preg_replace_callback('/\b([A-Z_][A-Z0-9_]*)\b/', fn($m) => $defines[$m[1]] ?? $m[1], $val);
        $val = preg_replace_callback('/\$(\w+)/', fn($m) => $vars[$m[1]] ?? $m[0], $val);

        if (!isset($sql_vars[$var])) $sql_vars[$var] = '';
        $sql_vars[$var] = ($op === '=') ? $val : $sql_vars[$var] . ' ' . $val;
    }

    // 生SQLも含めて走査（保険）
    $sql_candidates = array_values($sql_vars);
    foreach ($lines as $line) {
        if (preg_match('/(select|insert|update|delete|create\s+temp)\s+.+/i', $line)) {
            $sql_candidates[] = cleanSQL($line);
        }
    }

    // 重複を除いて処理開始
    foreach (array_unique($sql_candidates) as $sql) {
        $sql = cleanSQL($sql);
        if (empty($sql)) continue;

        try {
            $parser = new PHPSQLParser($sql, true);
            $op = '';
            $is_temp = stripos($sql, 'temp') !== false;

            // PostgreSQL 特有: SELECT INTO TEMP 構文（source = R, target@temp = C）
            if (isset($parser->parsed['SELECT']) && isset($parser->parsed['INTO']) && $is_temp) {
                foreach ($parser->parsed['INTO'] as $into) {
                    if (!isset($into['no_quotes']['parts'][0])) continue;
                    $tname = $into['no_quotes']['parts'][0] . '@temp';
                    $crud_data["$rel_path|$tname"] = [
                        'file' => $rel_path, 'table' => $tname,
                        'C' => '○', 'R' => '', 'U' => '', 'D' => ''
                    ];
                }
                foreach ($parser->parsed['FROM'] ?? [] as $from) {
                    if (!isset($from['no_quotes']['parts'][0])) continue;
                    $tname = $from['no_quotes']['parts'][0];
                    if (in_array($tname, $view_list)) $tname .= '@view';
                    $crud_data["$rel_path|$tname"] = array_merge(
                        $crud_data["$rel_path|$tname"] ?? [],
                        ['file' => $rel_path, 'table' => $tname, 'R' => '○']
                    );
                }
                continue; // この構文はここで終了
            }

            // 通常の操作種別判定
            if (isset($parser->parsed['SELECT'])) $op = 'R';
            if (isset($parser->parsed['INSERT'])) $op = 'C';
            if (isset($parser->parsed['UPDATE'])) $op = 'U';
            if (isset($parser->parsed['DELETE'])) $op = 'D';
            if (isset($parser->parsed['CREATE']) && $is_temp) $op = 'C@temp';

            foreach (['FROM', 'JOIN', 'UPDATE', 'INTO', 'TABLE'] as $clause) {
                if (!isset($parser->parsed[$clause])) continue;

                foreach ($parser->parsed[$clause] as $entry) {
                    if ($clause === 'FROM' && isset($entry['sub_tree'])) continue;
                    if (!isset($entry['no_quotes']['parts'][0])) continue;

                    $tname = $entry['no_quotes']['parts'][0];
                    if (in_array($tname, $view_list)) $tname .= '@view';
                    elseif (in_array($tname, $proc_list)) $tname .= '@proc';
                    elseif (strpos($op, '@temp') !== false) $tname .= '@temp';

                    $key = "$rel_path|$tname";
                    $ref = &$crud_data[$key];
                    $ref['file'] = $rel_path;
                    $ref['table'] = $tname;
                    $ref['C'] = ($op === 'C' || $op === 'C@temp') ? '○' : ($ref['C'] ?? '');
                    $ref['R'] = $op === 'R' ? '○' : ($ref['R'] ?? '');
                    $ref['U'] = $op === 'U' ? '○' : ($ref['U'] ?? '');
                    $ref['D'] = $op === 'D' ? '○' : ($ref['D'] ?? '');
                }
            }
        } catch (Exception $e) {
            $log_data[] = ['file' => $rel_path, 'message' => "fallback SQL解析失敗: " . $e->getMessage()];
        }
    }
}