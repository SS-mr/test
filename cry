#!/usr/bin/env php
<?php
/**
 * query-crud-extractor.php  –  JOIN / WITH / サブクエリ 対応版
 * requirements: nikic/php-parser ^5, phpoffice/phpspreadsheet ^2
 */

declare(strict_types=1);
require_once __DIR__ . '/vendor/autoload.php';

use PhpParser\{Error, Node, NodeTraverser, NodeVisitorAbstract, ParserFactory, NodeFinder};
use PhpParser\Node\Expr\Assign;
use PhpParser\Node\Expr\AssignOp\Concat as AssignConcat;
use PhpParser\Node\Expr\BinaryOp\Concat as BinConcat;
use PhpParser\Node\Expr\Variable;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

/* ---------- 0. 引数確認 ---------- */
$dir = $argv[1] ?? null;
if (!$dir) { fwrite(STDERR, "Usage: php query-crud-extractor.php <DIR> [<OUT.xlsx>]\n"); exit(1); }
$dir = realpath($dir);
if (!$dir || !is_dir($dir)) { fwrite(STDERR, "Error: '{$argv[1]}' is not a directory\n"); exit(1); }
$outFile = $argv[2] ?? 'file-crud.xlsx';

/* ---------- 1. 準備 ---------- */
$parser  = (new ParserFactory())->createForNewestSupportedVersion();
$finder  = new NodeFinder();
$results = [];
$log     = [];

/* ---- 1-a 文字列連結を解決（再帰クロージャ） ---- */
$resolve = function(Node $e) use (&$resolve): string {
    /* 文字列リテラル */
    if ($e instanceof Node\Scalar\String_
     || $e instanceof Node\Scalar\LNumber
     || $e instanceof Node\Scalar\DNumber) return (string)$e->value;

    /* "str {$var}" */
    if ($e instanceof Node\Scalar\Encapsed) {
        $s = '';
        foreach ($e->parts as $p) $s .= $resolve($p);
        return $s;
    }

    /* 連結式 */
    if ($e instanceof BinConcat) return $resolve($e->left) . $resolve($e->right);

    /* 変数 → プレースホルダー */
    if ($e instanceof Variable && is_string($e->name)) return '{{'.$e->name.'}}';

    /* その他式 */
    return '{{expr}}';
};

/* ---- 1-b 結果行追加ヘルパ（重複排除） ---- */
$add = function(string $file, string $func, string $tbl, string $crud) use (&$results) {
    $row = [$file,$func,$tbl,
        $crud==='C'?'○':'',
        $crud==='R'?'○':'',
        $crud==='U'?'○':'',
        $crud==='D'?'○':'',
    ];
    if (!in_array($row,$results,true)) $results[] = $row;
};

/* ---------- 2. ファイルを再帰処理 ---------- */
$it = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($dir,
            FilesystemIterator::SKIP_DOTS | FilesystemIterator::FOLLOW_SYMLINKS));

foreach ($it as $f) {
    if (!preg_match('/\.(php|inc)$/i', $f->getFilename())) continue;
    $code = file_get_contents($f->getPathname());
    try { $ast = $parser->parse($code); }
    catch (Error $e) { $log[] = [$f->getFilename(),'','PARSE_ERROR',$e->getMessage()]; continue; }

    /* 2-a 関数 / メソッド収集 */
    $collector = new class extends NodeVisitorAbstract {
        public array $funcs = [];
        private array $cls = [];
        public function enterNode(Node $n) {
            if ($n instanceof Node\Stmt\Class_)    $this->cls[] = $n->name->toString();
            if ($n instanceof Node\Stmt\Function_) $this->funcs[] = [$n,$n->name->toString()];
            if ($n instanceof Node\Stmt\ClassMethod) {
                $c = end($this->cls); $this->funcs[] = [$n, ($c?$c.'::':'').$n->name->toString()];
            }
        }
        public function leaveNode(Node $n) { if ($n instanceof Node\Stmt\Class_) array_pop($this->cls); }
    };
    (new NodeTraverser)->addVisitor($collector)->traverse($ast);

    /* 2-b 各関数を解析 */
    foreach ($collector->funcs as [$func,$funcName]) {
        /* 変数 => 静的SQL */
        $sqlMap = [];

        /* 代入・連結を追跡 */
        $tr = new NodeTraverser();
        $tr->addVisitor(new class($sqlMap,$resolve) extends NodeVisitorAbstract {
            private array &$m; private $r;
            public function __construct(array &$m,$r){$this->m=&$m;$this->r=$r;}
            public function leaveNode(Node $n){
                if ($n instanceof Assign && $n->var instanceof Variable && is_string($n->var->name))
                    $this->m[$n->var->name] = ($this->r)($n->expr);
                if ($n instanceof AssignConcat && $n->var instanceof Variable && is_string($n->var->name)){
                    $k=$n->var->name; $this->m[$k]=($this->m[$k]??'').($this->r)($n->expr);
                }
            }
        });
        $tr->traverse($func->getStmts()??[]);

        /* 呼び出し時に使われた SQL 変数を解析 */
        foreach ($finder->findInstanceOf($func, Node\Arg::class) as $arg){
            $v=$arg->value;
            if(!($v instanceof Variable) || !is_string($v->name) || !isset($sqlMap[$v->name])) continue;
            $sqlRaw=$sqlMap[$v->name];

            /* 正規化 */
            $sql=preg_replace('#--.*?$|/\*.*?\*/#ms',' ',$sqlRaw);
            $sql=preg_replace('/\s+/',' ',$sql);

            /* CRUD 抽出 */
            if (preg_match_all('/\bINSERT\s+INTO\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/i',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t,'C');

            if (preg_match_all('/\bUPDATE\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/i',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t,'U');

            if (preg_match_all('/\bDELETE\s+FROM\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/i',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t,'D');

            if (preg_match_all('/\bFROM\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/i',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t,'R');

            if (preg_match_all('/\bJOIN\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/i',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t,'R');

            if (preg_match_all('/\bWITH\s+[a-zA-Z0-9_]+\s+AS\s*\(\s*SELECT\b.*?\bFROM\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/is',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t.'@cte','R');

            if (preg_match_all('/\(\s*SELECT\b.*?\bFROM\s+[`"\[]?([a-zA-Z0-9_.]+)[`"\]]?/is',$sql,$m))
                foreach($m[1] as $t) $add($f->getFilename(),$funcName,$t.'@sub','R');
        }
    }
}

/* ---------- 3. Excel 出力 ---------- */
$book=new Spreadsheet();
$sheet=$book->getActiveSheet(); $sheet->setTitle('File-CRUD');
$sheet->fromArray(['file','function','table','C','R','U','D'],null,'A1');
$sheet->fromArray($results,null,'A2');

$logS=$book->createSheet(); $logS->setTitle('Log');
$logS->fromArray(['file','function','type','detail'],null,'A1');
$logS->fromArray($log,null,'A2');

(new Xlsx($book))->save($outFile);
printf("✔ 出力完了：%d 行 -> %s\n",count($results),$outFile);