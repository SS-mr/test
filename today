#!/usr/bin/env php
<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use PhpParser\ParserFactory;
use PhpParser\Error as PhpParserError;
use PHPSQLParser\PHPSQLParser;
use PHPSQLParser\PHPSQLParserException;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

//--------------------------------------------------
// 1. StringConcatResolver: .= と . を解決
//--------------------------------------------------
class StringConcatResolver
{
    public function resolve(string $code): string
    {
        $lines   = explode("\n", $code);
        $buffers = []; // varName => merged string
        $out     = [];

        foreach ($lines as $line) {
            // $var = "..."
            if (preg_match('/\$(\w+)\s*=\s*([\'"])(.*?)\2\s*;/', $line, $m)) {
                $buffers[$m[1]] = $m[3];
                continue;
            }
            // $var .= "..."
            if (preg_match('/\$(\w+)\s*\.=\s*([\'"])(.*?)\2\s*;/', $line, $m)) {
                $buffers[$m[1]] = ($buffers[$m[1]] ?? '') . $m[3];
                continue;
            }
            // $var = "..." . "..."
            if (preg_match('/\$(\w+)\s*=\s*([\'"])(.*?)\2\s*\.\s*([\'"])(.*?)\4\s*;/', $line, $m)) {
                $buffers[$m[1]] = $m[3] . $m[5];
                continue;
            }
            $out[] = $line;
        }

        foreach ($buffers as $var => $str) {
            $escaped = addcslashes($str, '"');
            $out[]   = sprintf('$%s = "%s";', $var, $escaped);
        }

        return implode("\n", $out);
    }
}

//--------------------------------------------------
// 2. SymbolResolver: 定数・変数展開の雛形
//--------------------------------------------------
class SymbolResolver
{
    private array $consts = [];
    private array $vars   = [];

    public function collect(string $code): void
    {
        // TODO: AST解析で define()/const と $var＝リテラル を収集
    }

    public function expand(string $code): string
    {
        // TODO: $this->consts と $this->vars を使ってコード中を置換
        return $code;
    }
}

//--------------------------------------------------
// 3. FunctionAnalyzer: 雛形
//--------------------------------------------------
class FunctionAnalyzer
{
    public function analyzeAll(array $fileCodeMap): void
    {
        // TODO
    }

    public function getCallGraph(): array
    {
        return []; // TODO
    }
}

//--------------------------------------------------
// 4. SQLExtractor: PHPSQLParser を用いた SQL 抽出・CRUD判定
//--------------------------------------------------
class SQLExtractor
{
    private PHPSQLParser $parser;
    private array $views;
    private array $procs;

    public function __construct()
    {
        $this->parser = new PHPSQLParser();
        $this->views  = file_exists('views_list.txt') ? array_map('trim', file('views_list.txt')) : [];
        $this->procs  = file_exists('procs_list.txt') ? array_map('trim', file('procs_list.txt')) : [];
    }

    /**
     * @return array{0:array<array{table:string,C:bool,R:bool,U:bool,D:bool,TEMP:string}>,1:array<array{cond:string}>}
     */
    public function extractFromCode(string $code): array
    {
        $results = [];
        $logs    = [];

        // インラインSQL抽出
        foreach (preg_split('/;\s*/', $code) as $stmt) {
            $stmt = trim($stmt);
            if ($stmt === '') continue;
            try {
                $ast = $this->parser->parse($stmt, true);
            } catch (PHPSQLParserException $e) {
                continue;
            }
            foreach ($ast as $entry) {
                $this->analyzeEntry($entry, $results);
            }
        }

        // 条件分岐ログ
        if (preg_match_all('/\b(if|switch)\s*\((.*?)\)/i', $code, $m)) {
            foreach ($m[0] as $cond) {
                $logs[] = ['cond' => $cond];
            }
        }

        return [$results, $logs];
    }

    private function analyzeEntry(array $entry, array &$out): void
    {
        $type = strtoupper(
            $entry['INSERT']   ? 'INSERT' :
            ($entry['UPDATE'] ? 'UPDATE' :
            ($entry['DELETE'] ? 'DELETE' :
            ($entry['CREATE'] ? 'CREATE' : 'SELECT')))
        );

        // CREATE TEMP TABLE
        if ($type === 'CREATE'
            && !empty($entry['CREATE']['temporary'])
            && stripos($entry['CREATE']['temporary'], 'TEMP') !== false
        ) {
            $tbl = $entry['CREATE']['table'];
            $out[] = ['table'=>$tbl,'C'=>false,'R'=>false,'U'=>false,'D'=>false,'TEMP'=>$tbl];
            return;
        }

        // FROM/JOIN/Alias
        $tables = [];
        if (!empty($entry['FROM'])) {
            foreach ($entry['FROM'] as $f) {
                $tables[] = $f['table'] ?? null;
                // AS alias 解決雛形
                // TODO: マッピング処理を入れる
                $tables[] = $f['alias']['name'] ?? null;
            }
        }
        if (!empty($entry['JOIN'])) {
            foreach ($entry['JOIN'] as $j) {
                $tables[] = $j['table'];
            }
        }

        foreach (array_filter(array_unique($tables)) as $tbl) {
            $isView = in_array(strtolower($tbl), array_map('strtolower', $this->views), true);
            $out[] = [
                'table' => $tbl . ($isView ? '@view' : ''),
                'C'     => in_array($type, ['INSERT','CREATE'], true),
                'R'     => $type==='SELECT'
                          || $type==='UPDATE'
                          || $type==='DELETE'
                          || !empty($entry['JOIN'])
                          || !empty($entry['WITH']),
                'U'     => $type==='UPDATE',
                'D'     => $type==='DELETE',
                'TEMP'  => ''
            ];
        }
    }
}

//--------------------------------------------------
// 5. CRUDAggregator: ファイルごと CRUD 集約
//--------------------------------------------------
class CRUDAggregator
{
    public function __construct(array $callGraph) { /* TODO */ }

    public function aggregate(array $fileSqlMap): array
    {
        $crudMap = [];
        foreach ($fileSqlMap as $file => $entries) {
            foreach ($entries as $e) {
                $tbl = $e['table'];
                $crudMap[$file][$tbl]['C'] = ($crudMap[$file][$tbl]['C'] ?? false) || $e['C'];
                $crudMap[$file][$tbl]['R'] = ($crudMap[$file][$tbl]['R'] ?? false) || $e['R'];
                $crudMap[$file][$tbl]['U'] = ($crudMap[$file][$tbl]['U'] ?? false) || $e['U'];
                $crudMap[$file][$tbl]['D'] = ($crudMap[$file][$tbl]['D'] ?? false) || $e['D'];
                $crudMap[$file][$tbl]['TEMP'] = $e['TEMP'] ?: ($crudMap[$file][$tbl]['TEMP'] ?? '');
            }
        }
        return $crudMap;
    }
}

//--------------------------------------------------
// 6. ExcelExporter: PhpSpreadsheet で出力
//--------------------------------------------------
class ExcelExporter
{
    /**
     * @param string $path
     * @param array<string,array<string,array{C:bool,R:bool,U:bool,D:bool,TEMP:string}>> $crudMap
     * @param array<array{cond:string}> $logs
     */
    public function export(string $path, array $crudMap, array $logs): void
    {
        $wb = new Spreadsheet();
        $ws = $wb->getActiveSheet();
        $ws->setTitle('File-CRUD');

        // File-CRUD シート
        $ws->fromArray(['Table Name','C','R','U','D','TEMP'], null, 'A1');
        $row = 2;
        foreach ($crudMap as $file => $tables) {
            $ws->setCellValue("A{$row}", "File: {$file}");
            $row++;
            foreach ($tables as $tbl => $ops) {
                $ws->setCellValue("A{$row}", $tbl);
                $ws->setCellValue("B{$row}", $ops['C'] ? '○' : '');
                $ws->setCellValue("C{$row}", $ops['R'] ? '○' : '');
                $ws->setCellValue("D{$row}", $ops['U'] ? '○' : '');
                $ws->setCellValue("E{$row}", $ops['D'] ? '○' : '');
                $ws->setCellValue("F{$row}", $ops['TEMP']);
                $row++;
            }
            $row++;
        }

        // LOGS シート
        $logSheet = $wb->createSheet();
        $logSheet->setTitle('LOGS');
        $logSheet->fromArray(['Condition'], null, 'A1');
        $r = 2;
        foreach ($logs as $l) {
            $logSheet->setCellValue("A{$r}", $l['cond']);
            $r++;
        }

        (new Xlsx($wb))->save($path);
    }
}

//--------------------------------------------------
// エントリポイント：段階的実装
//--------------------------------------------------
function main(array $argv): void
{
    $projectDir = $argv[1] ?? null;
    if (!$projectDir || !is_dir($projectDir)) {
        fwrite(STDERR, "Usage: php analyzer.php /path/to/project\n");
        exit(1);
    }

    // ファイル収集
    $rii   = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($projectDir));
    $files = [];
    foreach ($rii as $file) {
        if ($file->isFile() && preg_match('/\.(php|inc|html|js)$/i', $file->getFilename())) {
            $files[] = $file->getPathname();
        }
    }

    // 1) 文字列連結解決
    $resolver = new StringConcatResolver();
    $cleaned  = [];
    foreach ($files as $path) {
        $raw          = @file_get_contents($path);
        $cleaned[$path] = $raw !== false ? $resolver->resolve($raw) : '';
    }

    // 2) 定数・変数展開雛形
    $symbolResolver = new SymbolResolver();
    foreach ($cleaned as $path => $code) {
        $symbolResolver->collect($code);
        $cleaned[$path] = $symbolResolver->expand($code);
    }

    // 3) FunctionAnalyzer 雛形
    $funcAnalyzer = new FunctionAnalyzer();
    $funcAnalyzer->analyzeAll($cleaned);

    // 4) SQL抽出
    $sqlExt     = new SQLExtractor();
    $fileSqlMap = [];
    $logs       = [];
    foreach ($cleaned as $path => $code) {
        [$ops, $conds]  = $sqlExt->extractFromCode($code);
        $fileSqlMap[$path] = $ops;
        $logs          = array_merge($logs, $conds);
    }

    // 5) CRUD集約
    $aggregator = new CRUDAggregator($funcAnalyzer->getCallGraph());
    $crudMap    = $aggregator->aggregate($fileSqlMap);

    // 6) Excel出力
    $exporter = new ExcelExporter();
    $exporter->export('analysis_result.xlsx', $crudMap, $logs);

    echo "Step 1–6 completed. String concat, SQL parsing, and Excel export implemented.\n";
}

main($argv);