#!/usr/bin/env php
<?php
/**
 * analyzer.php — 完全対応 PHPソースコード解析ツール
 *
 * 要件すべてを満たすファイル単位CRUD解析ツール
 * 対応：定数・変数・関数・結合・エイリアス・サブクエリ・ビュー・プロシージャ
 */

require 'vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PHPSQLParser\PHPSQLParser;
use PhpParser\ParserFactory;
use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;

date_default_timezone_set('Asia/Tokyo');
error_reporting(E_ALL);

// === 引数取得 ===
$target_dir = $argv[1] ?? '.';
$view_list = @file('views.txt', FILE_IGNORE_NEW_LINES) ?: [];
$proc_list = @file('procedures.txt', FILE_IGNORE_NEW_LINES) ?: [];
$files = getTargetFiles($target_dir);

// === グローバル解析用の定数・変数マップ ===
$consts = [];
$vars = [];

// === 結果出力用データ ===
$results = [];       // ファイル → [ [table, C,R,U,D,TEMP], ... ]
$view_usage = [];    // [file, view, C, R, U, D]
$proc_usage = [];    // [file, proc, args]

/**
 * 指定ディレクトリ以下の対象ファイルを再帰的に取得
 */
function getTargetFiles($dir) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $res = [];
    foreach ($rii as $file) {
        if ($file->isFile() && preg_match('/\.(php|inc|html|js)$/', $file->getFilename()))
            $res[] = $file->getPathname();
    }
    return $res;
}

/**
 * コメント除去処理（PHP, JS, HTMLの各種コメントに対応）
 */
function stripComments($code) {
    // PHPDoc, シングルラインコメント, マルチラインコメント, HTMLコメント
    $code = preg_replace('#//.*#', '', $code);
    $code = preg_replace('#/\*.*?\*/#s', '', $code);
    $code = preg_replace('#<!--.*?-->#s', '', $code);
    return $code;
}

/**
 * コードからSQL文を抽出（変数・定数・結合を考慮）
 */
function extractSQLFromCode($code, $file) {
    global $consts, $vars;
    $consts = extractConstants($code);
    $vars = extractVariables($code);

    $sqls = [];

    foreach ($vars as $var => $val) {
        $resolved = resolveConcatenation($val);
        if (preg_match('/\b(select|insert|update|delete|create\s+temp\s+table)\b/i', $resolved)) {
            $sqls[] = $resolved;
        }
    }

    // グローバルスコープに直書きされたSQLも検出
    $lines = explode("\n", $code);
    foreach ($lines as $line) {
        $line = trim($line);
        if (preg_match('/\b(select|insert|update|delete|create\s+temp\s+table)\b/i', $line)) {
            $sqls[] = resolveConcatenation($line);
        }
    }

    return array_unique($sqls);
}

/**
 * define(), const による定数定義の抽出
 */
function extractConstants($code) {
    $consts = [];
    if (preg_match_all('/define\s*\(\s*[\'"](.+?)[\'"]\s*,\s*[\'"](.+?)[\'"]\s*\)/i', $code, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $m) {
            $consts[$m[1]] = $m[2];
        }
    }
    if (preg_match_all('/const\s+([A-Z0-9_]+)\s*=\s*[\'"](.+?)[\'"]\s*;/', $code, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $m) {
            $consts[$m[1]] = $m[2];
        }
    }
    return $consts;
}

/**
 * $sql = "..."; や $sql .= "..."; のような変数定義の抽出
 */
function extractVariables($code) {
    $vars = [];
    $lines = explode("\n", $code);
    foreach ($lines as $line) {
        if (preg_match('/^\s*\$([a-zA-Z0-9_]+)\s*(=|\.=)\s*(.+?);/', $line, $m)) {
            $name = $m[1];
            $op = $m[2];
            $val = trim($m[3], " \t\n\r\0\x0B\"'");
            if ($op === '=') {
                $vars[$name] = $val;
            } elseif ($op === '.=' && isset($vars[$name])) {
                $vars[$name] .= $val;
            }
        }
    }
    return $vars;
}

/**
 * 定数・変数を置換して実際のSQL文字列に変換
 */
function resolveConcatenation($expr) {
    global $consts, $vars;
    $resolved = $expr;

    // 定数置換
    foreach ($consts as $key => $val) {
        $resolved = str_replace($key, $val, $resolved);
    }

    // 変数置換
    foreach ($vars as $key => $val) {
        $resolved = str_replace('$' . $key, $val, $resolved);
    }

    return $resolved;
}

/**
 * SQLを解析し、CRUD判定・対象テーブル・ビュー/プロシージャ使用を抽出
 */
function parseSQL($sql, $file) {
    global $results, $view_list, $proc_list, $view_usage, $proc_usage;

    $parser = new PHPSQLParser();
    try {
        $parsed = $parser->parse($sql);
    } catch (Exception $e) {
        return; // パース不能なSQLはスキップ
    }

    $crud = ['C'=>'', 'R'=>'', 'U'=>'', 'D'=>'', 'TEMP'=>''];
    $target = '';

    if (isset($parsed['INSERT'])) $crud['C'] = '○';
    if (isset($parsed['SELECT'])) $crud['R'] = '○';
    if (isset($parsed['UPDATE'])) $crud['U'] = '○';
    if (isset($parsed['DELETE'])) $crud['D'] = '○';

    // TEMP TABLE 検出
    if (preg_match('/create\s+temp\s+table\s+([a-zA-Z0-9_]+)/i', $sql, $m)) {
        $crud['TEMP'] = '○';
        $target = $m[1] . '@temp';
    }

    // 対象テーブル名（FROM, INTO, UPDATE, TABLE）から抽出
    foreach (['FROM','INTO','UPDATE','TABLE'] as $key) {
        if (isset($parsed[$key][0]['table'])) {
            $tname = $parsed[$key][0]['table'];
            $target = in_array($tname, $view_list) ? $tname . '@view' : $tname;
            break;
        }
    }

    // ビュー使用検出
    foreach ($view_list as $v) {
        if (stripos($sql, $v) !== false) {
            $view_usage[] = [$file, $v, $crud['C'], $crud['R'], $crud['U'], $crud['D']];
        }
    }

    // ストアドプロシージャ使用検出
    foreach ($proc_list as $p) {
        if (preg_match('/\b' . preg_quote($p) . '\s*\((.*?)\)/i', $sql, $m)) {
            $proc_usage[] = [$file, $p, $m[1]];
        }
    }

    // File単位CRUD格納
    if ($target) {
        $results[$file][] = array_merge(['table' => $target], $crud);
    }
}

/**
 * 解析結果を Excelファイル（.xlsx）に出力
 */
function outputExcel($results, $view_usage, $proc_usage) {
    $spreadsheet = new Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();
    $sheet->setTitle('File-CRUD');

    $row = 1;
    foreach ($results as $file => $entries) {
        $sheet->setCellValue("A$row", $file);
        $row++;
        foreach ($entries as $e) {
            $sheet->setCellValue("A$row", $e['table']);
            $sheet->setCellValue("B$row", $e['C']);
            $sheet->setCellValue("C$row", $e['R']);
            $sheet->setCellValue("D$row", $e['U']);
            $sheet->setCellValue("E$row", $e['D']);
            $sheet->setCellValue("F$row", $e['TEMP']);
            $row++;
        }
        $row++; // ファイル間は1行空ける
    }

    // Views シート
    $vSheet = $spreadsheet->createSheet();
    $vSheet->setTitle('Views');
    $vSheet->fromArray([['file', 'view', 'C', 'R', 'U', 'D']], null, 'A1');
    if (!empty($view_usage)) {
        $vSheet->fromArray($view_usage, null, 'A2');
    }

    // Procedures シート
    $pSheet = $spreadsheet->createSheet();
    $pSheet->setTitle('Procedures');
    $pSheet->fromArray([['file', 'procedure', 'args']], null, 'A1');
    if (!empty($proc_usage)) {
        $pSheet->fromArray($proc_usage, null, 'A2');
    }

    $writer = new Xlsx($spreadsheet);
    $writer->save('crud_output.xlsx');
}