#!/usr/bin/env php
<?php
/**
 * analyzer.php — 完全対応 PHPソースコード解析ツール
 *
 * 要件：
 * - CRUD操作の静的解析（変数・関数・定数・結合・エイリアス・サブクエリ含む）
 * - ファイル単位でのExcel出力
 * - ビュー / 一時テーブル / プロシージャへの明示的マーク（@view, @temp, @proc）
 * - nikic/php-parser + greenlion/php-sql-parser の併用
 * - TEMPカラムは削除し、明示マークに一本化
 */

require 'vendor/autoload.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PHPSQLParser\PHPSQLParser;
use PhpParser\ParserFactory;
use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;

date_default_timezone_set('Asia/Tokyo');
error_reporting(E_ALL);

// === 対象ディレクトリの取得（CLI引数） ===
$target_dir = $argv[1] ?? '.';
$view_list = @file('views.txt', FILE_IGNORE_NEW_LINES) ?: [];
$proc_list = @file('procedures.txt', FILE_IGNORE_NEW_LINES) ?: [];
$files = getTargetFiles($target_dir);

// === グローバル変数（定義情報と解析結果の格納） ===
$consts = [];       // define, const 定義
$vars = [];         // 変数格納
$funcs = [];        // 自作関数のSQL
$results = [];      // file => [table, C,R,U,D]
$view_usage = [];   // [file, view, C,R,U,D]
$proc_usage = [];   // [file, procedure, args]
/**
 * 指定ディレクトリ以下の対象ファイルを再帰的に取得
 */
function getTargetFiles($dir) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $res = [];
    foreach ($rii as $file) {
        if ($file->isFile() && preg_match('/\.(php|inc|html|js)$/', $file->getFilename())) {
            $res[] = $file->getPathname();
        }
    }
    return $res;
}

/**
 * コメント除去処理（PHP, JS, HTMLの各種コメントに対応）
 */
function stripComments($code) {
    // PHPDoc, シングルラインコメント, マルチラインコメント, HTMLコメント
    $code = preg_replace('#//.*#', '', $code);             // 単一行コメント
    $code = preg_replace('#/\*.*?\*/#s', '', $code);       // ブロックコメント
    $code = preg_replace('#<!--.*?-->#s', '', $code);      // HTMLコメント
    return $code;
}
/**
 * nikic/php-parser を用いてPHPコード中の変数と関数定義を抽出する
 */
function analyzePhpAst($code) {
    global $vars, $funcs;

    $parser = (new ParserFactory())->create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Exception $e) {
        return;
    }

    $traverser = new NodeTraverser();
    $traverser->addVisitor(new class extends NodeVisitorAbstract {
        public function enterNode(Node $node) {
            global $vars, $funcs;

            // 変数への代入 ($sql = "...";)
            if ($node instanceof Node\Expr\Assign &&
                $node->var instanceof Node\Expr\Variable &&
                is_string($node->var->name) &&
                $node->expr instanceof Node\Scalar\String_) {
                $name = $node->var->name;
                $value = $node->expr->value;
                $vars[$name] = ($vars[$name] ?? '') . $value;
            }

            // 変数への文字列結合 ($sql .= "...";)
            if ($node instanceof Node\Expr\AssignOp\Concat &&
                $node->var instanceof Node\Expr\Variable &&
                is_string($node->var->name) &&
                $node->expr instanceof Node\Scalar\String_) {
                $name = $node->var->name;
                $value = $node->expr->value;
                $vars[$name] = ($vars[$name] ?? '') . $value;
            }

            // 関数定義の抽出
            if ($node instanceof Node\Stmt\Function_ &&
                is_string($node->name->name)) {
                $fname = $node->name->name;
                $body = $node->getStmts();

                foreach ($body as $stmt) {
                    // return "SELECT ...";
                    if ($stmt instanceof Node\Stmt\Return_ &&
                        $stmt->expr instanceof Node\Scalar\String_) {
                        $funcs[$fname] = $stmt->expr->value;
                    }
                }
            }
        }
    });

    $traverser->traverse($ast);
}
/**
 * SQL抽出用：変数・関数・定数を考慮してSQL文字列を生成する
 */
function extractSQLFromCode($code, $file) {
    global $consts, $vars, $funcs;

    // 定数解析（define / const）
    $consts = extractConstants($code);

    // AST解析（変数代入 / 関数定義）
    analyzePhpAst($code);

    $sqls = [];

    // 変数からのSQL抽出
    foreach ($vars as $var => $val) {
        $resolved = resolveSqlString($val);
        if (isLikelySQL($resolved)) {
            $sqls[] = $resolved;
        }
    }

    // 関数の戻り値からのSQL抽出
    foreach ($funcs as $fname => $val) {
        $resolved = resolveSqlString($val);
        if (isLikelySQL($resolved)) {
            $sqls[] = $resolved;
        }
    }

    // コード内の生SQLも対象にする（グローバルなSQL文）
    $lines = explode("\n", $code);
    foreach ($lines as $line) {
        $line = trim($line);
        if (isLikelySQL($line)) {
            $sqls[] = resolveSqlString($line);
        }
    }

    return array_unique($sqls);
}

/**
 * SQLらしい構文かどうかをざっくり判定
 */
function isLikelySQL($str) {
    return preg_match('/\b(select|insert|update|delete|create\s+temp\s+table)\b/i', $str);
}

/**
 * define(), const の定数展開
 */
function extractConstants($code) {
    $consts = [];
    if (preg_match_all('/define\s*\(\s*[\'"](.+?)[\'"]\s*,\s*[\'"](.+?)[\'"]\s*\)/i', $code, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $m) {
            $consts[$m[1]] = $m[2];
        }
    }
    if (preg_match_all('/const\s+([A-Z0-9_]+)\s*=\s*[\'"](.+?)[\'"]\s*;/', $code, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $m) {
            $consts[$m[1]] = $m[2];
        }
    }
    return $consts;
}

/**
 * SQL構文として最終的に置換された文字列を返す
 */
function resolveSqlString($expr) {
    global $consts, $vars, $funcs;

    $resolved = $expr;

    // 定数を置換
    foreach ($consts as $key => $val) {
        $resolved = str_replace($key, $val, $resolved);
    }

    // 変数を再帰的に置換
    foreach ($vars as $key => $val) {
        $resolved = str_replace('$' . $key, $val, $resolved);
    }

    // 関数呼び出しも展開（引数省略の単純関数だけ）
    foreach ($funcs as $fname => $body) {
        if (strpos($resolved, $fname . '()') !== false) {
            $resolved = str_replace($fname . '()', $body, $resolved);
        }
    }

    return $resolved;
}
/**
 * SQL文を解析し、CRUD分類とビュー・プロシージャ使用記録を行う
 */
function parseSQL($sql, $file) {
    global $results, $view_list, $proc_list, $view_usage, $proc_usage;

    $parser = new PHPSQLParser();
    try {
        $parsed = $parser->parse($sql);
    } catch (Exception $e) {
        return; // パースできないSQLはスキップ
    }

    $crud = ['C'=>'', 'R'=>'', 'U'=>'', 'D'=>''];
    $target = '';

    if (isset($parsed['INSERT'])) $crud['C'] = '○';
    if (isset($parsed['SELECT'])) $crud['R'] = '○';
    if (isset($parsed['UPDATE'])) $crud['U'] = '○';
    if (isset($parsed['DELETE'])) $crud['D'] = '○';

    // 一時テーブル（CREATE TEMP TABLE）特別扱い
    if (preg_match('/create\s+temp\s+table\s+([a-zA-Z0-9_]+)/i', $sql, $m)) {
        $target = $m[1] . '@temp';
    }

    // 通常テーブル or ビュー検出
    if (!$target) {
        foreach (['FROM','INTO','UPDATE','TABLE'] as $key) {
            if (!empty($parsed[$key][0]['table'])) {
                $tname = $parsed[$key][0]['table'];
                if (in_array($tname, $view_list)) {
                    $target = $tname . '@view';
                    $view_usage[] = [$file, $tname, $crud['C'], $crud['R'], $crud['U'], $crud['D']];
                } else {
                    $target = $tname;
                }
                break;
            }
        }
    }

    // ストアドプロシージャ使用検出（@proc）
    foreach ($proc_list as $p) {
        if (preg_match('/\b' . preg_quote($p) . '\s*\((.*?)\)/i', $sql, $m)) {
            $proc_usage[] = [$file, $p, $m[1]];
            if (!$target) {
                $target = $p . '@proc';
            }
        }
    }

    // 出力対象があれば追加（重複排除のためマージ前に存在チェック）
    if ($target) {
        $entry = array_merge(['table' => $target], $crud);
        if (!in_array($entry, $results[$file] ?? [])) {
            $results[$file][] = $entry;
        }
    }
}
/**
 * 解析結果を Excelファイル（.xlsx）に出力
 */
function outputExcel($results, $view_usage, $proc_usage) {
    $spreadsheet = new Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();
    $sheet->setTitle('File-CRUD');

    $row = 1;

    // === ヘッダー行 ===
    $sheet->setCellValue("A$row", 'Table');
    $sheet->setCellValue("B$row", 'C');
    $sheet->setCellValue("C$row", 'R');
    $sheet->setCellValue("D$row", 'U');
    $sheet->setCellValue("E$row", 'D');
    $row++;

    foreach ($results as $file => $entries) {
        $sheet->setCellValue("A$row", $file);
        $row++;

        // テーブル単位で重複排除（同一テーブル・CRUDの繰り返しを避ける）
        $unique = [];
        foreach ($entries as $e) {
            $key = $e['table'] . ':' . $e['C'] . $e['R'] . $e['U'] . $e['D'];
            if (!isset($unique[$key])) {
                $sheet->setCellValue("A$row", $e['table']);
                $sheet->setCellValue("B$row", $e['C']);
                $sheet->setCellValue("C$row", $e['R']);
                $sheet->setCellValue("D$row", $e['U']);
                $sheet->setCellValue("E$row", $e['D']);
                $row++;
                $unique[$key] = true;
            }
        }

        $row++; // ファイルごとに1行空ける
    }

    // === Views シート ===
    $vSheet = $spreadsheet->createSheet();
    $vSheet->setTitle('Views');
    $vSheet->fromArray([['file', 'view', 'C', 'R', 'U', 'D']], null, 'A1');
    if (!empty($view_usage)) {
        $vSheet->fromArray($view_usage, null, 'A2');
    }

    // === Procedures シート ===
    $pSheet = $spreadsheet->createSheet();
    $pSheet->setTitle('Procedures');
    $pSheet->fromArray([['file', 'procedure', 'args']], null, 'A1');
    if (!empty($proc_usage)) {
        $pSheet->fromArray($proc_usage, null, 'A2');
    }

    // === 出力ファイル保存 ===
    $writer = new Xlsx($spreadsheet);
    $writer->save('crud_output.xlsx');
}
// === メイン処理 ===
foreach ($files as $file) {
    $relpath = ltrim(str_replace(realpath($target_dir), '', realpath($file)), '/\\');

    // PHP/INC → AST + コメント除去、他 → そのまま読み込み
    $code = file_get_contents($file);
    $clean = stripComments($code);

    extractSQLFromCode($clean, $relpath); // ここで AST 解析・変数/関数収集・SQL抽出まで完了
    $sql_list = extractSQLFromCode($clean, $relpath);

    foreach ($sql_list as $sql) {
        parseSQL($sql, $relpath);
    }
}

// === Excel出力 ===
outputExcel($results, $view_usage, $proc_usage);
