#!/usr/bin/env php
<?php
declare(strict_types=1);
date_default_timezone_set('Asia/Tokyo');
error_reporting(E_ALL);

/*──────────── 依　存（Excel 出力のみ） ────────────*/
require __DIR__ . '/vendor/autoload.php';
use PhpOffice\PhpSpreadsheet\{Spreadsheet, Writer\Xlsx};

/*──────────── 定 数 ────────────*/
const EXT            = ['php', 'inc'];
const UNCERTAIN      = '⚠不明';
const MAX_INCLUDE    = 30;
const MAX_CANDIDATES = 32;

/*──────────── 汎 用 ────────────*/
function stripComments(string $code): string
{
    $code = preg_replace('~/\*.*?\*/~s', '', $code);
    $code = preg_replace('~//.*$~m',        '', $code);
    $code = preg_replace('~#.*$~m',         '', $code);
    return $code;
}

/*──────────── データ構造 ────────────*/
class Flags {public bool $c=false,$r=false,$u=false,$d=false;}
class Ctx {
    function __construct(public string $relPath){}
    public array $vars=[];   public array $sql=[];
    public array $crud=[];   public array $temps=[];
}

/*──────────── 主要パターン ────────────*/
const RE_SQL_CALL =
 '/\b(pg_query|query|exec|pg_(?:prepare|send_query|execute))\s*\(([^;]*?)\);/is';

/*──────────── ファイル解析 ────────────*/
function analyseFile(string $abs,array &$all,int $depth,int $rootLen): void
{
    if(isset($all[$abs])||$depth>MAX_INCLUDE) return;
    $raw=@file_get_contents($abs); if($raw===false) return;
    $ctx=$all[$abs]=new Ctx(substr($abs,$rootLen));  // 相対パス

    /* include / require 再帰 */
    if(preg_match_all('/\b(include|require)(_once)?\s*\(?\s*[\'"]([^\'"]+)["\']\s*\)?\s*;/i',
                      $raw,$incs,PREG_SET_ORDER))
        foreach($incs as $row){$inc=realpath(dirname($abs).'/'.$row[3]); if($inc) analyseFile($inc,$all,$depth+1,$rootLen);}

    $code=stripComments($raw);

    /* 1) 変数 = / .= */
    if(preg_match_all('/\$(\w+)\s*(=|\.=)\s*(.+?);/s',$code,$m,PREG_SET_ORDER)){
        foreach($m as [$allm,$name,$op,$expr]){
            $vals=[];
            if(preg_match_all('/[\'"](.*?)[\'"]/s',$expr,$ss)) $vals=$ss[1];
            if(!$vals) $vals=[UNCERTAIN];
            foreach($vals as &$v)
                $v=preg_replace_callback('/\$(\w+)/',
                     fn($mm)=>$ctx->vars['$'.$mm[1]][0]??UNCERTAIN,$v);
            if($op==='='){
                $ctx->vars['$'.$name]=$vals;
            }else{
                $base=$ctx->vars['$'.$name]??[UNCERTAIN]; $new=[];
                foreach($base as $b)foreach($vals as $v)
                    $new[]=($b===UNCERTAIN||$v===UNCERTAIN)?UNCERTAIN:$b.$v;
                $ctx->vars['$'.$name]=array_slice(array_unique([...$base,...$vals,...$new]),0,MAX_CANDIDATES);
            }
        }
    }

    /* 2) SQL 実行行 */
    if(preg_match_all(RE_SQL_CALL,$code,$calls,PREG_SET_ORDER)){
        foreach($calls as $row){
            $parts=explode(',',$row[2]);               // ★ 修正
            $arg = trim(end($parts));
            if(preg_match('/^[\'"](.*)[\'"]$/s',$arg,$mm))       $ctx->sql[]=$mm[1];
            elseif(preg_match('/^\$(\w+)$/',$arg,$mm))           $ctx->sql=array_merge($ctx->sql,$ctx->vars['$'.$mm[1]]??[UNCERTAIN]);
            else                                                 $ctx->sql[]=UNCERTAIN;
        }
    }

    /* 変数名に 'sql' を含む候補も */
    foreach($ctx->vars as $n=>$vals) if(stripos($n,'sql')!==false) $ctx->sql=array_merge($ctx->sql,$vals);

    $ctx->sql=array_slice(array_unique($ctx->sql),0,MAX_CANDIDATES);

    foreach($ctx->sql as $rawSql){
        /* ; で分割し複数文を個別解析 ─★洗練ポイント★─ */
        foreach(preg_split('/;+/',$rawSql,-1,PREG_SPLIT_NO_EMPTY) as $single)
            analyseSql(trim($single),$ctx);
    }
}

/*──────────── SQL → CRUD ────────────*/
function analyseSql(string $sql,Ctx $ctx): void
{
    $q=strtolower($sql); if($q===''||$q===strtolower(UNCERTAIN)) return;

    /* WITH CTE */
    if(preg_match_all('/with\s+(\w+)\s+as/i',$q,$cte))
        foreach($cte[1] as $n){add($ctx,"$n@temp",'c'); $ctx->temps[]=$n;}

    /* SELECT … INTO TEMP */
    if(preg_match('/select.+?into\s+(?:temp|temporary)\s+(\w+)/is',$q,$m)){
        add($ctx,"$m[1]@temp",'c'); $ctx->temps[]=$m[1];
    }

    /* INSERT / UPDATE / DELETE / TRUNCATE / DROP */
    if(preg_match('/insert\s+into\s+(\w+)/i',$q,$m)) add($ctx,$m[1],'c');
    if(preg_match('/update\s+(\w+)/i',$q,$m))        add($ctx,$m[1],'u');
    if(preg_match('/delete\s+from\s+(\w+)/i',$q,$m)) add($ctx,$m[1],'d');
    if(preg_match('/truncate\s+table\s+(\w+)/i',$q,$m)) add($ctx,$m[1],'d');
    if(preg_match('/drop\s+table\s+(\w+)/i',$q,$m))     add($ctx,$m[1],'r');

    /* FROM / JOIN 参照 → R */
    if(preg_match_all('/\bfrom\s+(\w+)/i',$q,$f))
        foreach($f[1] as $tbl) add($ctx,in_array($tbl,$ctx->temps,true)?"$tbl@temp":$tbl,'r');
    if(preg_match_all('/\bjoin\s+(\w+)/i',$q,$j))
        foreach($j[1] as $tbl) add($ctx,in_array($tbl,$ctx->temps,true)?"$tbl@temp":$tbl,'r');
}

/** Flags OR */
function add(Ctx $ctx,string $tbl,string $flag): void
{
    $ctx->crud[$tbl]??=new Flags(); $ctx->crud[$tbl]->$flag=true;
}

/*──────────── フォルダ走査 ────────────*/
function scan(string $dir): array
{
    $it=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir,FilesystemIterator::SKIP_DOTS));
    $out=[]; foreach($it as $f) if(in_array(strtolower($f->getExtension()),EXT,true)) $out[]=$f->getRealPath();
    return $out;
}

/*──────────── Excel 出力 ────────────*/
function exportExcel(array $all,string $file): void
{
    $s=new Spreadsheet(); $sh=$s->getActiveSheet();
    $sh->fromArray(['File','Table','C','R','U','D']);
    $row=2;
    foreach($all as $ctx){
        $first=true;
        foreach($ctx->crud as $tbl=>$f){
            $sh->fromArray([
                $first?$ctx->relPath:'',
                $tbl,
                $f->c?'○':'',
                $f->r?'○':'',
                $f->u?'○':'',
                $f->d?'○':''
            ],null,"A$row");
            $first=false; $row++;
        }
    }
    (new Xlsx($s))->save($file);
    echo "✔ Excel: $file\n";
}

/*──────────── Main ────────────*/
$dir=$argv[1]??''; if($dir===''||!is_dir($dir)){fwrite(STDERR,"usage: ./crud-analyzer.php <dir>\n"); exit(1);}
$root   = realpath($dir);
$rootLen= strlen($root)+1;
$all    =[];

foreach(scan($root) as $f) analyseFile($f,$all,0,$rootLen);

exportExcel($all,__DIR__.'/File-CRUD.xlsx');
echo "完了: files=".count($all)."\n";