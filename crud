/**
 * 拡張版：文字列結合対応＋同名変数の個別追跡による CRUD 抽出
 */
function analyzeCrud(string $content): array
{
    $map = [];
    $sqlStatements = [];

    // ① 変数への初期代入を「新しい SQL 文」として登録
    if (preg_match_all(
        '/\$([a-zA-Z_][A-Za-z0-9_]*)\s*=\s*[\'"]([^\'"]+)[\'"];/',
        $content,
        $mInit,
        PREG_SET_ORDER
    )) {
        foreach ($mInit as $m) {
            [$full, $var, $part] = $m;
            $sqlStatements[] = ['var' => $var, 'sql' => $part];
        }
    }

    // ② 文字列結合 .= があれば、直前の同名変数エントリに追記
    if (preg_match_all(
        '/\$([a-zA-Z_][A-Za-z0-9_]*)\s*\.\=\s*[\'"]([^\'"]+)[\'"];/',
        $content,
        $mApp,
        PREG_SET_ORDER
    )) {
        foreach ($mApp as $m) {
            [$full, $var, $part] = $m;
            // 後ろから検索し、一番最後に追加された同名変数に追記
            for ($i = count($sqlStatements) - 1; $i >= 0; $i--) {
                if ($sqlStatements[$i]['var'] === $var) {
                    $sqlStatements[$i]['sql'] .= $part;
                    break;
                }
            }
        }
    }

    // ③ 各 SQL 文に対して CRUD パターンを適用
    $patterns = [
        // INSERT INTO または SELECT … INTO TEMP => C
        'C' => '/INSERT\s+INTO\s+`?([A-Za-z0-9_]+)`?|\bSELECT\b.*?\bINTO\s+TEMP(?:ORARY)?\s+`?([A-Za-z0-9_]+)`?/i',
        // SELECT … FROM => R
        'R' => '/\bSELECT\b.*?\bFROM\s+`?([A-Za-z0-9_]+)`?/i',
        // UPDATE => U
        'U' => '/\bUPDATE\s+`?([A-Za-z0-9_]+)`?/i',
        // DELETE FROM => D
        'D' => '/\bDELETE\s+FROM\s+`?([A-Za-z0-9_]+)`?/i',
    ];

    foreach ($sqlStatements as $stmt) {
        $sql = $stmt['sql'];
        foreach ($patterns as $op => $pat) {
            if (preg_match_all($pat, $sql, $m, PREG_SET_ORDER)) {
                foreach ($m as $match) {
                    // キャプチャ 1 or 2 にテーブル名が入る
                    $table = $match[1] ?: ($match[2] ?? null);
                    if ($table !== null) {
                        $map[$table] ??= ['C'=>false,'R'=>false,'U'=>false,'D'=>false];
                        $map[$table][$op] = true;
                    }
                }
            }
        }
    }

    // ④ 通常の静的 SQL にもフォールバックでマッチ
    $fallback = [
        'C'=>'/INSERT\s+INTO\s+`?([A-Za-z0-9_]+)`?/i',
        'R'=>'/SELECT\b.*?\bFROM\s+`?([A-Za-z0-9_]+)`?/is',
        'U'=>'/UPDATE\s+`?([A-Za-z0-9_]+)`?/i',
        'D'=>'/DELETE\s+FROM\s+`?([A-Za-z0-9_]+)`?/i',
    ];
    foreach ($fallback as $op => $pat) {
        if (preg_match_all($pat, $content, $m)) {
            foreach ($m[1] as $table) {
                $map[$table] ??= ['C'=>false,'R'=>false,'U'=>false,'D'=>false];
                $map[$table][$op] = true;
            }
        }
    }

    return $map;
}